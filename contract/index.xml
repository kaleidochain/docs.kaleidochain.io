<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>智能合约 on Kaleido文档</title>
    <link>https://docs.kaleidochain.io/contract/</link>
    <description>Recent content in 智能合约 on Kaleido文档</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 May 2019 18:29:20 +0800</lastBuildDate>
    
	<atom:link href="https://docs.kaleidochain.io/contract/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>快速开始</title>
      <link>https://docs.kaleidochain.io/contract/quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.kaleidochain.io/contract/quick-start/</guid>
      <description>普通合约和以太坊上一致，合约创建者负责合约的部署，部署 需要花费一定的Kal，合约调用者调用时需要花费Kal，在调用的交易中指定gas_limit和gas_price。
安装solidity编译器 和以太坊一样使用前需要安装npm的环境，然后再安装solifity的编译器环境
npm install -g solc@0.4.24 # or npm install -g solc-cli@0.4.24 # or sudo apt-get install solc@0.4.24  创建合约文件 创建新文件game.sol，并输入以下内容。
pragma solidity ^0.4.0; contract Game { address public creator; string greeting; function Game(string _greeting) public payable { creator = msg.sender; greeting = _greeting; } function greet() constant returns (string){ return greeting; } function setGreeting(string _newgreeting){ greeting = _newgreeting; } function kill(){ require(msg.sender == creator,&amp;quot;not creator&amp;quot;); suicide(creator); } }  编译部署合约 编译合约代码game.</description>
    </item>
    
    <item>
      <title>使用Truffle开发合约</title>
      <link>https://docs.kaleidochain.io/contract/using-truffle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.kaleidochain.io/contract/using-truffle/</guid>
      <description>除了通过kalgo命令行进行部署外也可以通过truffle环境进行部署。
首先安装truffle：
npm install –g truffle@4.1.14  初始化truffle项目：
mkdir bare-box cd bare-box truffle init  并配置节点信息：
在 truffle-config.js文件找到development,删除注释,配置节点ip,port为你要连接的节点的信息。
development: { host: &amp;quot;127.0.0.1&amp;quot;, // Localhost (default: none) port: 8545, // Standard Ethereum port (default: none) network_id: &amp;quot;*&amp;quot;, // Any network (default: none) },  在目录contracts下撰写合约文件Game.sol（注: 文件名称必须与合约名称相同），示例合约内容如下：
pragma solidity ^0.4.0; contract Game { address public creator; string greeting; function Game(string _greeting) public payable { creator = msg.sender; greeting = _greeting; } function greet() constant returns (string){ return greeting; } function setGreeting(string _newgreeting){ greeting = _newgreeting; } function kill(){ require(msg.</description>
    </item>
    
    <item>
      <title>权限管理合约</title>
      <link>https://docs.kaleidochain.io/contract/authority-contract/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.kaleidochain.io/contract/authority-contract/</guid>
      <description>kaleido扩展了合约的权限管理功能。通过权限管理合约，可以实现：
 用户调用产生的gas消耗由合约支付 合约调用黑名单，禁止某些用户调用合约  合约创建者可以控制调用权限和每次的调用花费上限。
下面的示例说明这种合约的使用方式。
环境准备 参考使用Truffle开发合约中的内容，配置好开发环境。
编写合约 游戏合约指调用合约的手续费用由合约自己支付，调用者（用户）不需要支付Kal，这样使得游戏能被所有用户都使用。为了达到这个目的需要将游戏合约注册到系统合约里面，系统合约地址为sysytem(0x1000000000000000000000000000000000000001)，当注册到这个系统合约后，该合约就会在调用的时候从合约地址支付，如果合约地址中Kal为0，调用就会失败。 游戏合约的手续费因为由合约本身支付，所以为了防止无效支付和支付过高手续费用，游戏合约需要和权限合约配合使用，通过权限合约可以控制用户调用的权限，同时通过在权限合约中指定gas_limit和gas_price作为调用合约交易中的上限。权限合约为Authority.sol。 权限合约可以在多个合约之间共享。 在实际使用中需要把游戏合约地址和对应的权限合约地址注册到系统合约中。 system. setAuthContractAddr(address(authority));
在权限合约中设置对应的gas_limit和gas_price： authority.setGas(500000000,1000000);
在权限合约中将用户添加到白名单: authority.grant(addr);
在权限合约中将用户移除白名单,白名单外的用户调用game合约的交易是不会被区块打包: authority.revoke(addr);
便于白名单合约管理,将拥有者权限移交给用户账号: authority.changeOwner(msg.sender);
普通逻辑合约Game.sol例子:
pragma solidity ^0.4.0; contract AuthorityInterface{ function setPayer() public; function setGas(uint256 price, uint64 gaslimit) public; function grant(address addr)public; function revoke(address addr) public; } contract AuthIndexInterface{ function setAuthContractAddr(address add) public; function getAuthContractAddr(address add) public view returns(address); } contract Game{ address public creator; string greeting; AuthIndexInterface AuthIndex = AuthIndexInterface(0x1000000000000000000000000000000000000001); AuthorityInterface Authority; function Game(string _greeting) public payable{ creator = msg.</description>
    </item>
    
    <item>
      <title>合约创建人</title>
      <link>https://docs.kaleidochain.io/contract/contract-creator/</link>
      <pubDate>Thu, 23 May 2019 18:29:20 +0800</pubDate>
      
      <guid>https://docs.kaleidochain.io/contract/contract-creator/</guid>
      <description>在Kaleido Chain中，系统内置了一个系统合约，记录了所有合约的创建人地址。创建人地址就是部署合约的外部账号地址。如果一个合约A是由另一个合约B部署的，合约A的创建人地址就自动继承合约B的创建人地址。该创建人地址在合约的构造函数中也可以成功获取。
合约创建人有多种用途。第一种用途就是合约抵押机制。合约要可执行，需要先抵押一定量的token到其创建人账户中。系统自动识别合约的创建人抵押量，来计算合约可被调用的次数。第二种用途就是权限管理。很多情况下，一个合约都需要与一个超级管理员关联，以限制部分接口的调用权限。合约创建人机制默认提供了一直超级管理员的可选项，简化了相关合约的开发。
要在Solidity中获取一个合约的创建人，需要使用以下代码：
import &#39;lib/kaleido/SysContract.sol&#39;; contract Demo { // WithDraw - only creator can get the token function WithDraw(uint amount) public { require(msg.sender == SysContract.getCreator(address(this))); msg.sender.transfer(amount); } }  </description>
    </item>
    
  </channel>
</rss>
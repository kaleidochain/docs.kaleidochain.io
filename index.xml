<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kaleidochain on Kaleido文档</title>
    <link>https://docs.kaleidochain.io/</link>
    <description>Recent content in kaleidochain on Kaleido文档</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 May 2019 18:29:20 +0800</lastBuildDate>
    
	<atom:link href="https://docs.kaleidochain.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>安装运行节点</title>
      <link>https://docs.kaleidochain.io/getting-started/installing-node/</link>
      <pubDate>Thu, 23 May 2019 12:05:32 +0800</pubDate>
      
      <guid>https://docs.kaleidochain.io/getting-started/installing-node/</guid>
      <description>我们目前只提供基于docker的二进制版本，仅需要安装docker并拉取镜像即可。
docker pull kaleidochain/kalgo  准备运行目录 首次运行，你需要准备一个数据目录，该目录可以在任意位置，但我们建议使用$HOME/.kaleido。为了后面使用方便，可以将该目录设置为环境变量KALEIDO_HOME。选取的目录将交由kaleido进行使用和管理，因此建议选择的目录下不要存储其它数据和文件。
mkdir $HOME/.kaleido export KALEIDO_HOME=$HOME/.kaleido echo $KALEIDO_HOME  后面的命令中，我们将使用环境变量$KALEIDO_HOME来表示该目录。
作为全节点启动 使用以下命令启动一个名为kalnode的全节点，通过参数--testnet使其连接到测试网络。
docker run -d --name kalnode -p 38883:38883 -p 38883:38883/udp \ -v $KALEIDO_HOME:/root/.kaleido kaleidochain/kalgo --testnet  启动后，该节点会连接上测试网络，下载区块数据。 我们可以通过IPC连上该节点，查看连接上的peer节点数、当前区块高度等。
docker exec -it kalnode kalgo --testnet attach &amp;gt; net.peerCount 15 &amp;gt; eth.blockNumber 17568 &amp;gt; exit  如果你想让自己的节点也显示在网络状态页面中，增加参数--ethstats &amp;quot;your-node-name:bpFe9vOevM@stats-testnet.kaleidochain.io:38881&amp;quot;启动即可，其中your-node-name需要使用自己的节点名称来代替。
docker run -d --name kalnode -p 38883:38883 -p 38883:38883/udp \ -v $KALEIDO_HOME:/root/.kaleido kaleidochain/kalgo --testnet \ --ethstats &amp;quot;your-node-name:bpFe9vOevM@stats-testnet.kaleidochain.io:38881&amp;quot;  作为服务节点启动 如果你有钱包或其它应用，就需要在全节点的基础上，通过--rpc和--ws参数来开启RPC和WS服务，同时映射8545/8546端口到主机。 这里需要注意的是，由于节点运行在docker容器中，所以RPC和WS服务监听的IP必须是0.</description>
    </item>
    
    <item>
      <title>创建挖矿凭证</title>
      <link>https://docs.kaleidochain.io/mining/create-miner-key/</link>
      <pubDate>Thu, 23 May 2019 11:58:34 +0800</pubDate>
      
      <guid>https://docs.kaleidochain.io/mining/create-miner-key/</guid>
      <description>我们首先需要创建挖矿公私钥对，得到挖矿凭证minerkey。
假设当前区块高度为12065，通常情况下，你想尽快开始挖矿，那么你应该选择比当前区块高度略大或相等的高度值，这里我们选取12100，来生成从12100高度开始挖矿的minerkey，这个minerkey属于12100高度所在区间。这个开始高度由参数--begin指定。此外，在生成minerkey的时候，还要通过--miner指明矿工账号，--coinbase指明受益人的地址（即接收区块奖励的地址）。
如下命令就是用来生成一个属于12100高度所在区间的挖矿凭证minerkey，矿工账号miner和受益人coinbase都是0x958DE277Cde7f5808a910dBf6f7854DF52C25833。
docker run --rm -v $KALEIDO_HOME:/root/.kaleido \ kaleidochain/kalgo --testnet makeminerkey \ --begin 12100 \ --miner 0x958DE277Cde7f5808a910dBf6f7854DF52C25833 \ --coinbase 0x958DE277Cde7f5808a910dBf6f7854DF52C25833  以上命令执行需要一定的时间，完成后输出结果最后内容如下，这里给出了生成的minerkey，其内部包含了受益人coinbase的地址、起始高度begin、区间的结束高度end等信息。
Using following params: contract address: 0x1000000000000000000000000000000000000002 miner: 0x958DE277Cde7f5808a910dBf6f7854DF52C25833 coinbase: 0x958DE277Cde7f5808a910dBf6f7854DF52C25833 begin: 12100 end: 1000000 Generate minerkey: 0x2c91689a000000000000000000000000958de277cde7f5808a910dbf6f7854df52c258330000000000000000000000000000000000000000000000000000000000000002c0bd0fe9db297d84f28da5ff851e8c7f30dab5f45ee7891311d78d7bbda6e5d878c98aab5aa50746b052e423385c497ba38066c2f6f6dc05c600a5eab6110b02f9e77403c5becfc80251c4d038e50d3a6b99bd1db88ca7547b8abc134e8235610000000000000000000000000000000000000000000000000000000000002f44  以上输出的最后一行中的0x2c9168...就是挖矿凭证minerkey，其作用相当于公钥。对应的私钥数据存储在节点的数据目录$KALEIDO_HOME/testnet/kalgo/下以ephemeralkey为前缀的目录，该数据通常比较大。</description>
    </item>
    
    <item>
      <title>开发资源</title>
      <link>https://docs.kaleidochain.io/dapp-developer/resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.kaleidochain.io/dapp-developer/resources/</guid>
      <description> 斗地主Demo   斗地主Demo源码   斗地主Demo APK  SDK下载   iOS版本的预编译SDK   Android版本的预编译SDK  </description>
    </item>
    
    <item>
      <title>快速开始</title>
      <link>https://docs.kaleidochain.io/contract/quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.kaleidochain.io/contract/quick-start/</guid>
      <description>普通合约和以太坊上一致，合约创建者负责合约的部署，部署 需要花费一定的Kal，合约调用者调用时需要花费Kal，在调用的交易中指定gas_limit和gas_price。
安装solidity编译器 和以太坊一样使用前需要安装npm的环境，然后再安装solifity的编译器环境
npm install -g solc@0.4.24 # or npm install -g solc-cli@0.4.24 # or sudo apt-get install solc@0.4.24  创建合约文件 创建新文件game.sol，并输入以下内容。
pragma solidity ^0.4.0; contract Game { address public creator; string greeting; function Game(string _greeting) public payable { creator = msg.sender; greeting = _greeting; } function greet() constant returns (string){ return greeting; } function setGreeting(string _newgreeting){ greeting = _newgreeting; } function kill(){ require(msg.sender == creator,&amp;quot;not creator&amp;quot;); suicide(creator); } }  编译部署合约 编译合约代码game.</description>
    </item>
    
    <item>
      <title>注册挖矿凭证</title>
      <link>https://docs.kaleidochain.io/mining/register-miner-key/</link>
      <pubDate>Thu, 23 May 2019 17:47:37 +0800</pubDate>
      
      <guid>https://docs.kaleidochain.io/mining/register-miner-key/</guid>
      <description> 要使minerkey可以挖矿，还需要有投票权。这需要使用自己的账户，调用矿工合约0x1000000000000000000000000000000000000002，将自己的矿工账户与挖矿凭证关联起来。这相当于将自己持有的token对应的投票权，委托给了这个minerkey。minerkey只有被委托后，才会具有一定的投票权，才能在挖矿中使用。
注册矿工本质上是一次合约调用，有两种方式： 1. 通过钱包注册 2. 通过命令行注册
使用钱包注册（推荐） 在钱包中，用你的账户，向测试链发送一笔交易，接收地址为矿工合约地址0x1000000000000000000000000000000000000002，data填写为上面生成的minerkey内容即可。在某些钱包客户端中，交易页面默认没有Data字段，需要在设置中打开。
注册一次需要的gas费用大约在200000左右，建议填写gas费用为210000，或者在类似MetaMask的客户端中，选择Fastest来发送。gas太少会导致交易执行失败。
使用命令行注册 使用命令行向矿工合约地址0x1000000000000000000000000000000000000002发送一笔交易，将data字段填写为上面生成的minerkey即可。
docker exec -it kalnode kalgo --testnet attach &amp;gt; myaddr = &#39;0x958DE277Cde7f5808a910dBf6f7854DF52C25833&#39;; &amp;gt; personal.unlockAccount(myaddr, &#39;your-password&#39;); &amp;gt; hash = eth.sendTransaction({ from: myaddr, to: &#39;0x1000000000000000000000000000000000000002&#39;, gas: 200000, gasPrice: 20000000000, data: &#39;0x2c91689a0000000000000000000000001805b7ee5dd340981628b81d5d094c44a027bdc500000000000000000000000000000000000000000000000000000000000000028b259c4c04e61089ce9c0554339fa9dca01f6ef8c7de4f9268add46cd77c6d0fa668a15f6fec02b01d8f37a80a29cf62360aa69b975fa94b23ec6a32d8abf87d3e4c8f41c3c49e6d765aa7449dc510c0cf95a8ba714bd8abecf16e69df9318e200000000000000000000000000000000000000000000000000000000000003e8&#39; }); &amp;gt; admin.sleepBlocks(2); &amp;gt; eth.getTransactionReceipt(hash);  </description>
    </item>
    
    <item>
      <title>创建新的账户</title>
      <link>https://docs.kaleidochain.io/getting-started/creating-new-account/</link>
      <pubDate>Thu, 23 May 2019 12:08:28 +0800</pubDate>
      
      <guid>https://docs.kaleidochain.io/getting-started/creating-new-account/</guid>
      <description> 如果你还没有账户，可以按照本指引创建一个属于你自己的账户。这里介绍了通过成熟可信的钱包工具生成和命令行生成的方法。
使用钱包客户端生成账户（推荐） 你可以使用现有的以太坊钱包，连接到kaleido区块链网络后，创建新的账户。
下面以MetaMask为例，说明连接kaleido测试网络和创建账户的流程。
在MetaMask中，点击右上角的下拉菜单。在打开的列表中，点击最底部的Custom RPC。在New Network文本框中，点击Show Advanced Options后，显示出4个文本框，分别填写如下信息：
 New RPC URL: http://testnet.kaleidochain.io:8545 ChainID: 889 Symbol: KAL Nickname: Kaleido Test Network  填写后如下图。
最后点击旁边的Save按钮。
当最上方的网络名称栏显示Kaleido Test Network即表示连接成功。
然后在MetaMask中创建账户即可。一旦你有了token，就可以方便的使用钱包进行转账了。
使用命令行生成账户 在运行你自己的节点之后，你还可以通过命令行生成一个新账户，具体如下。将其中的your-password替换为你自己的密码即可。
docker exec -it kalnode kalgo --testnet attach &amp;gt; personal.newAccount(&#39;your-password&#39;) &amp;quot;0xe40046ef6f0d4a05d90ca62d8ead47e21c886fc1&amp;quot; &amp;gt; eth.accounts [&amp;quot;0xe40046ef6f0d4a05d90ca62d8ead47e21c886fc1&amp;quot;]  </description>
    </item>
    
    <item>
      <title>运行挖矿节点</title>
      <link>https://docs.kaleidochain.io/mining/running-node-as-miner/</link>
      <pubDate>Thu, 23 May 2019 17:49:25 +0800</pubDate>
      
      <guid>https://docs.kaleidochain.io/mining/running-node-as-miner/</guid>
      <description>一旦注册好矿工合约，将投票权成功委托给了挖矿凭证，那么就可以使用该挖矿凭证挖矿了。加上参数--mine --etherbase &amp;lt;miner addr&amp;gt;重新启动前面的全节点即可。
注意这里的--etherbase的值，应该写你刚才发起矿工注册的交易的账号地址（而不是收益地址）。挖矿程序会使用该地址，在挖矿合约中查找你注册的挖矿信息。
docker stop kalnode &amp;amp;&amp;amp; docker rm kalnode docker run -d --name kalnode -v $KALEIDO_HOME:/root/.kaleido \ -p 38883:38883 -p 38883:38883/udp \ kaleidochain/kalgo --testnet \ --mine --etherbase &#39;your-address&#39;  可以使用以下命令查询验证你的节点是否正在挖矿：
docker exec -it kalnode kalgo --testnet attach &amp;gt; eth.mining true  如果仍然没有开始挖矿，可能有几个原因：
 minerkey没有注册成功 节点启动时的参数没有设置，或者没有与minerkey匹配 没有token，或只有少于1个单位的token 区块高度还没有到你注册的区间范围内 minerkey对应的私钥数据目录不存在或不匹配  如有以上问题，可以查阅之前的文档，重新操作一次。或者将相关信息和问题发到社区中寻求帮助。
持续挖矿 由于挖矿凭证是有区块范围的，区块高度超过相应范围后，之前的挖矿凭证就失效了。你需要提前为下一个区间范围注册好另一个挖矿凭证，以保持持续不间断的挖矿。
为避免矿工合约数据过大，矿工合约限制了最多能提前注册未来1个区间。 你可以提前为未来1个区间生成minerkey并提前注册，并预估好这几个区间跑完的时间，设置好提醒方式，以提醒你再次注册。 在测试网络中，1个区间大约可以跑24天。你可以设置每2~3周来检查或注册一次。</description>
    </item>
    
    <item>
      <title>获取测试网KAL</title>
      <link>https://docs.kaleidochain.io/getting-started/getting-testnet-token/</link>
      <pubDate>Thu, 23 May 2019 12:11:28 +0800</pubDate>
      
      <guid>https://docs.kaleidochain.io/getting-started/getting-testnet-token/</guid>
      <description>我们创建了一个免费领取kaleidochain测试网络KAL Token的页面 ，点击进去，填写自己的账户地址即可领取。</description>
    </item>
    
    <item>
      <title>使用Truffle开发合约</title>
      <link>https://docs.kaleidochain.io/contract/using-truffle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.kaleidochain.io/contract/using-truffle/</guid>
      <description>除了通过kalgo命令行进行部署外也可以通过truffle环境进行部署。
首先安装truffle：
npm install –g truffle@4.1.14  初始化truffle项目：
mkdir bare-box cd bare-box truffle init  并配置节点信息：
在 truffle-config.js文件找到development,删除注释,配置节点ip,port为你要连接的节点的信息。
development: { host: &amp;quot;127.0.0.1&amp;quot;, // Localhost (default: none) port: 8545, // Standard Ethereum port (default: none) network_id: &amp;quot;*&amp;quot;, // Any network (default: none) },  在目录contracts下撰写合约文件Game.sol（注: 文件名称必须与合约名称相同），示例合约内容如下：
pragma solidity ^0.4.0; contract Game { address public creator; string greeting; function Game(string _greeting) public payable { creator = msg.sender; greeting = _greeting; } function greet() constant returns (string){ return greeting; } function setGreeting(string _newgreeting){ greeting = _newgreeting; } function kill(){ require(msg.</description>
    </item>
    
    <item>
      <title>测试你的应用</title>
      <link>https://docs.kaleidochain.io/getting-started/testing-your-dapp/</link>
      <pubDate>Thu, 23 May 2019 12:13:37 +0800</pubDate>
      
      <guid>https://docs.kaleidochain.io/getting-started/testing-your-dapp/</guid>
      <description>&lt;p&gt;Kaleidochain官方维护了一个测试网络的全节点&lt;code&gt;testnet.kaleidochain.io&lt;/code&gt;，开放了RPC（8545端口）和WS（8546端口）接口，你可以使用命令行或者钱包连接到测试网络，部署和测试你的应用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>权限管理合约</title>
      <link>https://docs.kaleidochain.io/contract/authority-contract/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.kaleidochain.io/contract/authority-contract/</guid>
      <description>kaleido扩展了合约的权限管理功能。通过权限管理合约，可以实现：
 用户调用产生的gas消耗由合约支付 合约调用黑名单，禁止某些用户调用合约  合约创建者可以控制调用权限和每次的调用花费上限。
下面的示例说明这种合约的使用方式。
环境准备 参考使用Truffle开发合约中的内容，配置好开发环境。
编写合约 游戏合约指调用合约的手续费用由合约自己支付，调用者（用户）不需要支付Kal，这样使得游戏能被所有用户都使用。为了达到这个目的需要将游戏合约注册到系统合约里面，系统合约地址为sysytem(0x1000000000000000000000000000000000000001)，当注册到这个系统合约后，该合约就会在调用的时候从合约地址支付，如果合约地址中Kal为0，调用就会失败。 游戏合约的手续费因为由合约本身支付，所以为了防止无效支付和支付过高手续费用，游戏合约需要和权限合约配合使用，通过权限合约可以控制用户调用的权限，同时通过在权限合约中指定gas_limit和gas_price作为调用合约交易中的上限。权限合约为Authority.sol。 权限合约可以在多个合约之间共享。 在实际使用中需要把游戏合约地址和对应的权限合约地址注册到系统合约中。 system. setAuthContractAddr(address(authority));
在权限合约中设置对应的gas_limit和gas_price： authority.setGas(500000000,1000000);
在权限合约中将用户添加到白名单: authority.grant(addr);
在权限合约中将用户移除白名单,白名单外的用户调用game合约的交易是不会被区块打包: authority.revoke(addr);
便于白名单合约管理,将拥有者权限移交给用户账号: authority.changeOwner(msg.sender);
普通逻辑合约Game.sol例子:
pragma solidity ^0.4.0; contract AuthorityInterface{ function setPayer() public; function setGas(uint256 price, uint64 gaslimit) public; function grant(address addr)public; function revoke(address addr) public; } contract AuthIndexInterface{ function setAuthContractAddr(address add) public; function getAuthContractAddr(address add) public view returns(address); } contract Game{ address public creator; string greeting; AuthIndexInterface AuthIndex = AuthIndexInterface(0x1000000000000000000000000000000000000001); AuthorityInterface Authority; function Game(string _greeting) public payable{ creator = msg.</description>
    </item>
    
    <item>
      <title>合约创建人</title>
      <link>https://docs.kaleidochain.io/contract/contract-creator/</link>
      <pubDate>Thu, 23 May 2019 18:29:20 +0800</pubDate>
      
      <guid>https://docs.kaleidochain.io/contract/contract-creator/</guid>
      <description>在Kaleido Chain中，系统内置了一个系统合约，记录了所有合约的创建人地址。创建人地址就是部署合约的外部账号地址。如果一个合约A是由另一个合约B部署的，合约A的创建人地址就自动继承合约B的创建人地址。该创建人地址在合约的构造函数中也可以成功获取。
合约创建人有多种用途。第一种用途就是合约抵押机制。合约要可执行，需要先抵押一定量的token到其创建人账户中。系统自动识别合约的创建人抵押量，来计算合约可被调用的次数。第二种用途就是权限管理。很多情况下，一个合约都需要与一个超级管理员关联，以限制部分接口的调用权限。合约创建人机制默认提供了一直超级管理员的可选项，简化了相关合约的开发。
要在Solidity中获取一个合约的创建人，需要使用以下代码：
import &#39;lib/kaleido/SysContract.sol&#39;; contract Demo { // WithDraw - only creator can get the token function WithDraw(uint amount) public { require(msg.sender == SysContract.getCreator(address(this))); msg.sender.transfer(amount); } }  </description>
    </item>
    
    <item>
      <title>委托池</title>
      <link>https://docs.kaleidochain.io/mining/delegate-pool/</link>
      <pubDate>Thu, 23 May 2019 18:27:26 +0800</pubDate>
      
      <guid>https://docs.kaleidochain.io/mining/delegate-pool/</guid>
      <description>除了持有token的外部账户可以参与挖矿外，持有token的合约也可以参与挖矿。这为多种形式的挖矿提供了技术机制。
委托池的用途 在你初期没有token的时候，你可以部署一个官方提供的委托合约代码，向官方申请委托授权。官方经过审核后，就会为你的合约进行抵押和委托。
通过委托池挖矿，你也可以实现集中多人的小量token到一起来参与挖矿的功能。你只需要部署自己的委托池合约，并确保合约可以执行（参考合约抵押机制）。发布自己的合约地址，
最后，你使用自己的委托合约注册矿工，就可以开始挖矿。
委托池的实现 外部账户注册矿工是通过发起交易的方式，调用系统矿工合约来注册的。合约的注册方式有点不同。合约必须要实现一个调用系统矿工合约进行注册的接口，外部账户或其它合约通过调用该接口来注册矿工。
在有多层合约嵌套调用时，需要注意以下细节。在注册系统矿工合约时，谁是矿工取决于msg.sender是谁。正常情况下，应该使用call调用系统矿工合约时，来实现将合约自己注册成为矿工。如果是要将调用合约的外部账号注册成为矿工，那么就需要使用delegatecall来调用，以使得msg.sender继承自调用者。具体可参考关于call和delegatecall的区别说明。
注册成为矿工时可以指定受益人，因此合约提供的注册矿工的接口通常都要做权限管理，限制某些地址才能调用、或者某些地址才能成为受益人，以防止收益人账号被他人修改。最简单的实现是，只要合约的创建人才可调用该接口。
下面是一个简单但功能完整的委托池的实现：
import &amp;quot;./lib/kaleido/SysContract.sol&amp;quot;; import &amp;quot;./lib/math/SafeMath.sol&amp;quot;; contract DelegatePoolDemo { using SafeMath for uint256; mapping(address=&amp;gt;uint256) private _balances; // register self into minerdb function registerMiner(bytes minerkey) public { require(msg.sender == SysContract.creatorOf(address(this))); SysContract.minerRegister(minerkey); } /** * @dev Gets the balance of the specified address. * @param owner The address to query the balance of. * @return A uint256 representing the amount owned by the passed address.</description>
    </item>
    
  </channel>
</rss>
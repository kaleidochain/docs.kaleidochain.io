<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kaleidochain on Kaleido文档</title>
    <link>https://docs.kaleidochain.io/</link>
    <description>Recent content in kaleidochain on Kaleido文档</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 May 2019 18:29:20 +0800</lastBuildDate>
    
	<atom:link href="https://docs.kaleidochain.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>概览</title>
      <link>https://docs.kaleidochain.io/contract/over-view/</link>
      <pubDate>Thu, 23 May 2019 18:29:20 +0800</pubDate>
      
      <guid>https://docs.kaleidochain.io/contract/over-view/</guid>
      <description> 前言: Kaleido是基于Algorand共识算法的公链，系统结构和以太坊相同，采用的是账户模型和基于EVM虚拟机的智能合约系统，完全兼容以太坊的环境，智能合约开发语言采用的是Solidity。链上合约的部署和以太坊相同，也是采用gas机制，链上结算单位为Kal。kaleido智能合约编写和部署完全兼容以太坊合约,在使用时与以太坊不同之处在合约使用前需要抵押一部分Token获得链24小时周期的使用权，所以在合约部署完成之后需要执行一个抵押操作。除了这些还提供了更丰富的功能,权限控制、链上随机数等:
 抵押机制:kaleido通过合约抵押机制分配合约执行权限,合约创建后,合约创建者必须有Kal抵押,合约才能被用户使用,(抵押额度=创建者账户Kal+抵押合约Kal),抵押额度关系着24小时内合约可以被调交易次数,创建者可以通过抵押合约来接受别人抵押增加合约调用次数.用户随时将账户Kal抵押给指定的合约创建者,也可以任意时候取出抵押额度，抵押的Kal只能由抵押者自己取出;
权限控制:kaleido为降低用户使用门槛,提供给合约的功能模块,合约创建者可以通过权限控制合约为自己合约用户代扣合约交易手续费,实现用户零门槛接入;相应的为了防止代扣手续费交易泛滥,系统合约提供了2种权限控制模式:白名单模式和黑名单模式.
 白名单模式,只有加入白名单列表用户才能发起代扣手续费交易,其他用户只能发送普通交易（由调用者付手续费用）; 黑名单模式,加入了黑名单列表用户不能发起代扣手续费交易; 注意同一个创建者的所有合约共享黑白名单数据; 创建者还能通过权限控制指定用户代扣手续费交易的gasLimit,gasPrice上限,防止账户Kal被大量消耗; 用户在调用合约时只需将交易中gasLimit(tx.gas)置为0,指定交易为合约创建者代扣手续费,这样用户即使在账户没有Kal的情况下也能使用合约;  </description>
    </item>
    
    <item>
      <title>安装运行节点</title>
      <link>https://docs.kaleidochain.io/getting-started/installing-node/</link>
      <pubDate>Thu, 23 May 2019 12:05:32 +0800</pubDate>
      
      <guid>https://docs.kaleidochain.io/getting-started/installing-node/</guid>
      <description>我们目前只提供基于docker的二进制版本，仅需要安装docker并拉取镜像即可。
docker pull kaleidochain/kalgo  准备运行目录 首次运行，你需要准备一个数据目录，该目录可以在任意位置，但我们建议使用$HOME/.kaleido。为了后面使用方便，可以将该目录设置为环境变量KALEIDO_HOME。选取的目录将交由kaleido进行使用和管理，因此建议选择的目录下不要存储其它数据和文件。
mkdir $HOME/.kaleido export KALEIDO_HOME=$HOME/.kaleido echo $KALEIDO_HOME  后面的命令中，我们将使用环境变量$KALEIDO_HOME来表示该目录。
作为全节点启动 使用以下命令启动一个名为kalnode的全节点，通过参数--testnet使其连接到测试网络。
docker run -d --name kalnode -p 38883:38883 -p 38883:38883/udp \ -v $KALEIDO_HOME:/root/.kaleido kaleidochain/kalgo --testnet  启动后，该节点会连接上测试网络，下载区块数据。 我们可以通过IPC连上该节点，查看连接上的peer节点数、当前区块高度等。
docker exec -it kalnode kalgo --testnet attach &amp;gt; net.peerCount 15 &amp;gt; eth.blockNumber 17568 &amp;gt; exit  如果你想让自己的节点也显示在网络状态页面中，增加参数--ethstats &amp;quot;your-node-name:bpFe9vOevM@stats-testnet.kaleidochain.io:38881&amp;quot;启动即可，其中your-node-name需要使用自己的节点名称来代替。
docker run -d --name kalnode -p 38883:38883 -p 38883:38883/udp \ -v $KALEIDO_HOME:/root/.kaleido kaleidochain/kalgo --testnet \ --ethstats &amp;quot;your-node-name:bpFe9vOevM@stats-testnet.kaleidochain.io:38881&amp;quot;  作为服务节点启动 如果你有钱包或其它应用，就需要在全节点的基础上，通过--rpc和--ws参数来开启RPC和WS服务，同时映射8545/8546端口到主机。 这里需要注意的是，由于节点运行在docker容器中，所以RPC和WS服务监听的IP必须是0.</description>
    </item>
    
    <item>
      <title>创建挖矿凭证</title>
      <link>https://docs.kaleidochain.io/mining/create-miner-key/</link>
      <pubDate>Thu, 23 May 2019 11:58:34 +0800</pubDate>
      
      <guid>https://docs.kaleidochain.io/mining/create-miner-key/</guid>
      <description>我们首先需要创建挖矿公私钥对，得到挖矿凭证minerkey。
假设当前区块高度为12065，通常情况下，你想尽快开始挖矿，那么你应该选择比当前区块高度略大或相等的高度值，这里我们选取12100，来生成从12100高度开始挖矿的minerkey，这个minerkey属于12100高度所在区间。这个开始高度由参数--begin指定。此外，在生成minerkey的时候，还要通过--miner指明矿工账号，--coinbase指明受益人的地址（即接收区块奖励的地址）。
如下命令就是用来生成一个属于12100高度所在区间的挖矿凭证minerkey，矿工账号miner和受益人coinbase都是0x958DE277Cde7f5808a910dBf6f7854DF52C25833。
docker run --rm -v $KALEIDO_HOME:/root/.kaleido \ kaleidochain/kalgo --testnet makeminerkey \ --miner.stakeowner 0x958DE277Cde7f5808a910dBf6f7854DF52C25833 \ --minerkey.coinbase 0x958DE277Cde7f5808a910dBf6f7854DF52C25833 \ --minerkey.start 12100  以上命令执行需要一定的时间，完成后输出结果最后内容如下，这里给出了生成的minerkey，其内部包含了受益人coinbase的地址、起始高度begin、区间的结束高度end等信息。
MinerKey: 0x39fb25e90000000000000000000000000000000000000000000000000000000000002f440000000000000000000000000000000000000000000000000000000000000064000000000000000000000000958de277cde7f5808a910dbf6f7854df52c2583355094cc911dca3b0ff42e63e7d4d627d5131307fcd495b535de4fa627bb999bfb728eed47ed4b7426c46e8b57c4132dc89e4092463267040c7c6769a80e72c69 Details: miner = 0x958DE277Cde7f5808a910dBf6f7854DF52C25833 coinbase = 0x958DE277Cde7f5808a910dBf6f7854DF52C25833 start = 12100 end = 1000000 lifespan = 100 vrfVerifier = 0x55094cc911dca3b0ff42e63e7d4d627d5131307fcd495b535de4fa627bb999bf voteVerfier = 0xb728eed47ed4b7426c46e8b57c4132dc89e4092463267040c7c6769a80e72c69  以上输出中的0x39fb25...就是挖矿凭证minerkey，其作用相当于公钥。对应的私钥数据存储在节点的数据目录$KALEIDO_HOME/testnet/kalgo/minerkeys下，注意不要公开或泄露该私钥数据。
生成minerkey有以下几点需要注意：
 必须提前100个区块注册：你如果想生成start=H的minerkey，就必须在H-100区块高度之前，完成注册 区块高度一旦到达你注册区间起始位置的100个区块以内，minerkey就无法修改 受益人Coinbase是可以随时修改，并在修改成功的下个区块立即生效，不受第2点的限制 更新minerkey时，新生成的区间的起始位置必须与要修改的minerkey一致，否则无法更新成功 你最多只能提前注册一个区间，即minerkey.start必须小于当前区块高度+1000000  如果私钥不慎遗失，并且此时minerkey无法修改，你可以将钱转入新的地址后，重新注册成为矿工即可。</description>
    </item>
    
    <item>
      <title>开发资源</title>
      <link>https://docs.kaleidochain.io/dapp-developer/resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.kaleidochain.io/dapp-developer/resources/</guid>
      <description> 斗地主Demo   斗地主Demo源码   斗地主Demo APK  SDK下载   iOS版本的预编译SDK   Android版本的预编译SDK  编译环境说明  本Demo使用Cocos Creator V2.1.0开发与编译，可使用Mac版本或Windows版本进行构建与编译。下面以Mac版本的Cocos Creator为例对如何编译生成iOS版和Android版本的APP进行说明。 </description>
    </item>
    
    <item>
      <title>配置MetaMask钱包</title>
      <link>https://docs.kaleidochain.io/wallet/metamask/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.kaleidochain.io/wallet/metamask/</guid>
      <description>配置MetaMask MetaMask通过网络设置来支持KAL，你只需一步配置，即可在MetaMask中使用KAL。如果你还没有安装MetaMask，可以参考下面的安装MetaMask。
打开MetaMask，点击右上角下拉框打开网络配置界面，点击最后一项。如下图：
根据Kaleidochain网络配置信息，选择主网络或测试网络，填写网络配置项，然后点击保存，并关闭配置界面。如下图：
此时，主界面显示已经连上Kaleido主网络，你可以在这里查看自己的KAL余额或发送交易，最近发送的交易也会显示在这里。
注意：配置或切换网络后，可能会出现按钮点击无反应的情况，此时只需要重启浏览器即可。这是MetaMask的问题，官方正在解决中。
安装MetaMask 请务必确保从浏览器官方渠道（Chrome Firefox Opera）下载安装MetaMask钱包。如果官方渠道打不开，可以在官方下载插件包选择手工安装，各浏览器的手工安装方法请参考官方安装指引。
安装后，你可以新建一个账户，或导入原有的助记词来恢复账户。如下图：
然后设置MetaMask钱包的打开密码。如下图：
完成后，你会看到MetaMask钱包的主界面。如下图：
现在，你可以配置MetaMask来使用KAL了。</description>
    </item>
    
    <item>
      <title>注册挖矿凭证</title>
      <link>https://docs.kaleidochain.io/mining/register-miner-key/</link>
      <pubDate>Thu, 23 May 2019 17:47:37 +0800</pubDate>
      
      <guid>https://docs.kaleidochain.io/mining/register-miner-key/</guid>
      <description> 要使minerkey可以挖矿，还需要有投票权。这需要使用自己的账户，调用矿工合约0x1000000000000000000000000000000000000002，将自己的矿工账户与挖矿凭证关联起来。这相当于将自己持有的token对应的投票权，委托给了这个minerkey。minerkey只有被委托后，才会具有一定的投票权，才能在挖矿中使用。
注册矿工本质上是一次合约调用，有两种方式： 1. 通过钱包注册 2. 通过命令行注册
使用钱包注册（推荐） 在钱包中，用你的账户，向测试链发送一笔交易，接收地址为矿工合约地址0x1000000000000000000000000000000000000002，data填写为上面生成的minerkey内容即可。在某些钱包客户端中，交易页面默认没有Data字段，需要在设置中打开。
注册一次需要的gas费用大约在200000左右，建议填写gas费用为210000，或者在类似MetaMask的客户端中，选择Fastest来发送。gas太少会导致交易执行失败。
使用命令行注册 使用命令行向矿工合约地址0x1000000000000000000000000000000000000002发送一笔交易，将data字段填写为上面生成的minerkey即可。
docker exec -it kalnode kalgo --testnet attach &amp;gt; myaddr = &#39;0x958DE277Cde7f5808a910dBf6f7854DF52C25833&#39;; &amp;gt; personal.unlockAccount(myaddr, &#39;your-password&#39;); &amp;gt; hash = eth.sendTransaction({ from: myaddr, to: &#39;0x1000000000000000000000000000000000000002&#39;, gas: 200000, gasPrice: 20000000000, data: &#39;0x39fb25e90000000000000000000000000000000000000000000000000000000000002f440000000000000000000000000000000000000000000000000000000000000064000000000000000000000000958de277cde7f5808a910dbf6f7854df52c2583355094cc911dca3b0ff42e63e7d4d627d5131307fcd495b535de4fa627bb999bfb728eed47ed4b7426c46e8b57c4132dc89e4092463267040c7c6769a80e72c69&#39; }); &amp;gt; admin.sleepBlocks(2); &amp;gt; eth.getTransactionReceipt(hash);  </description>
    </item>
    
    <item>
      <title>创建新的账户</title>
      <link>https://docs.kaleidochain.io/getting-started/creating-new-account/</link>
      <pubDate>Thu, 23 May 2019 12:08:28 +0800</pubDate>
      
      <guid>https://docs.kaleidochain.io/getting-started/creating-new-account/</guid>
      <description> 如果你还没有账户，可以按照本指引创建一个属于你自己的账户。这里介绍了通过成熟可信的钱包工具生成和命令行生成的方法。
使用钱包客户端生成账户（推荐） 你可以使用现有的以太坊钱包，连接到kaleido区块链网络后，创建新的账户。
下面以MetaMask为例，说明连接kaleido测试网络和创建账户的流程。
在MetaMask中，点击右上角的下拉菜单。在打开的列表中，点击最底部的Custom RPC。在New Network文本框中，点击Show Advanced Options后，显示出4个文本框，分别填写如下信息：
 New RPC URL: http://testnet.kaleidochain.io:8545 ChainID: 889 Symbol: KAL Nickname: Kaleido Test Network  填写后如下图。
最后点击旁边的Save按钮。
当最上方的网络名称栏显示Kaleido Test Network即表示连接成功。
然后在MetaMask中创建账户即可。一旦你有了token，就可以方便的使用钱包进行转账了。
使用命令行生成账户 在运行你自己的节点之后，你还可以通过命令行生成一个新账户，具体如下。将其中的your-password替换为你自己的密码即可。
docker exec -it kalnode kalgo --testnet attach &amp;gt; personal.newAccount(&#39;your-password&#39;) &amp;quot;0xe40046ef6f0d4a05d90ca62d8ead47e21c886fc1&amp;quot; &amp;gt; eth.accounts [&amp;quot;0xe40046ef6f0d4a05d90ca62d8ead47e21c886fc1&amp;quot;]  </description>
    </item>
    
    <item>
      <title>运行挖矿节点</title>
      <link>https://docs.kaleidochain.io/mining/running-node-as-miner/</link>
      <pubDate>Thu, 23 May 2019 17:49:25 +0800</pubDate>
      
      <guid>https://docs.kaleidochain.io/mining/running-node-as-miner/</guid>
      <description>一旦注册好矿工合约，将投票权成功委托给了挖矿凭证，那么就可以使用该挖矿凭证挖矿了。加上参数--mine --miner.stakeowner &amp;lt;miner addr&amp;gt;重新启动前面的全节点即可。
注意这里的--etherbase的值，应该写你刚才发起矿工注册的交易的账号地址（而不是收益地址）。挖矿程序会使用该地址，在挖矿合约中查找你注册的挖矿信息。
docker stop kalnode &amp;amp;&amp;amp; docker rm kalnode docker run -d --name kalnode -v $KALEIDO_HOME:/root/.kaleido \ -p 38883:38883 -p 38883:38883/udp \ kaleidochain/kalgo --testnet \ --mine --miner.stakeowner &#39;your-address&#39;  可以使用以下命令查询验证你的节点是否正在挖矿：
docker exec -it kalnode kalgo --testnet attach &amp;gt; eth.mining true  如果仍然没有开始挖矿，可能有几个原因：
 minerkey没有注册成功 节点启动时的参数没有设置，或者没有与minerkey匹配 没有token，或只有少于1个单位的token 区块高度还没有到你注册的区间范围内 minerkey对应的私钥数据目录不存在或不匹配  如有以上问题，可以查阅之前的文档，重新操作一次。或者将相关信息和问题发到社区中寻求帮助。
持续挖矿 由于挖矿凭证是有区块范围的，区块高度超过相应范围后，之前的挖矿凭证就失效了。你需要提前为下一个区间范围注册好另一个挖矿凭证，以保持持续不间断的挖矿。
为避免矿工合约数据过大，矿工合约限制了最多能提前注册未来1个区间。 你可以提前为未来1个区间生成minerkey并提前注册，并预估好这几个区间跑完的时间，设置好提醒方式，以提醒你再次注册。 在测试网络中，1个区间大约可以跑24天。你可以设置每2~3周来检查或注册一次。</description>
    </item>
    
    <item>
      <title>获取测试网KAL</title>
      <link>https://docs.kaleidochain.io/getting-started/getting-testnet-token/</link>
      <pubDate>Thu, 23 May 2019 12:11:28 +0800</pubDate>
      
      <guid>https://docs.kaleidochain.io/getting-started/getting-testnet-token/</guid>
      <description>我们创建了一个免费领取kaleidochain测试网络KAL Token的页面 ，点击进去，填写自己的账户地址即可领取。</description>
    </item>
    
    <item>
      <title>iOS版本编译</title>
      <link>https://docs.kaleidochain.io/dapp-developer/ios-build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.kaleidochain.io/dapp-developer/ios-build/</guid>
      <description>环境准备 可参阅Cocos Creator官方文档《安装配置原生开发环境》安装XCode。
构建  Demo源代码下载并解压后，点击Cocos Creator菜单栏的 项目 -&amp;gt; 构建发布 -&amp;gt; 构建，Cocos Creator将自动生成iOS版本与Android版本的相关工程文件与代码。
 将build_kaleido/jsb-link/frameworks/runtime-src/proj.ios_mac/ios/NativeGengine.h、build_kaleido/jsb-link/frameworks/runtime-src/proj.ios_mac/ios/NativeGengine.m和build_kaleido/jsb-link/frameworks/runtime-src/proj.ios_mac/ios/RootViewController.mm拷贝至build/jsb-link/frameworks/runtime-src/proj.android-studio/ios目录中，并拖动至XCode开发环境中的ios目录。
 将build_kaleido/jsb-link/frameworks/runtime-src/proj.ios_mac/ios/portal.lua.h拷贝至build/jsb-link/frameworks/runtime-src/proj.android-studio/ios目录中，并拖动至XCode开发环境中的Resources目录。
 将 Gengine.framework 拷贝至build/jsb-link/frameworks/runtime-src/proj.ios_mac/目录中，并拖动至XCode开发环境中的Frameworks目录。
 点击工程设置中 Build Phases -&amp;gt; Compile Sources ，在RootViewController.mm后面的Compiler Flags中添加 -fmodules -fcxx-modules 来消除Use of &amp;lsquo;@import&amp;rsquo; when modules are disabled的报错。
 点击工程设置中 Build Settings，在搜索框中输入CLang，Apple Clang - Language - Modules -&amp;gt; Enable Modules (C and Objective-C) 更改为 Yes 来消除build/jsb-link/frameworks/runtime-src/proj.ios_mac/Gengine.framework/Headers/Universe.objc.h:20:37: No type or protocol named &amp;lsquo;goSeqRefInterface&amp;rsquo;的报错。
 上述2至6修改后的工程文件可参考 build_kaleido/jsb-link/frameworks/runtime-src/proj.ios_mac/KaleidoDoudizhuDemo.xcodeproj/project.pbxproj
  编译与运行 1.</description>
    </item>
    
    <item>
      <title>测试你的应用</title>
      <link>https://docs.kaleidochain.io/getting-started/testing-your-dapp/</link>
      <pubDate>Thu, 23 May 2019 12:13:37 +0800</pubDate>
      
      <guid>https://docs.kaleidochain.io/getting-started/testing-your-dapp/</guid>
      <description>&lt;p&gt;Kaleidochain官方维护了一个测试网络的全节点&lt;code&gt;testnet.kaleidochain.io&lt;/code&gt;，开放了RPC（8545端口）和WS（8546端口）接口，你可以使用命令行或者钱包连接到测试网络，部署和测试你的应用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>安卓版本编译</title>
      <link>https://docs.kaleidochain.io/dapp-developer/android-build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.kaleidochain.io/dapp-developer/android-build/</guid>
      <description>环境准备 可参阅Cocos Creator官方文档《安装配置原生开发环境》安装Android SDK和Android NDK并在Cocos Creator中配置。
构建  Demo源代码下载并解压后，点击Cocos Creator菜单栏的 项目 -&amp;gt; 构建发布 -&amp;gt; 构建，Cocos Creator将自动生成iOS版本与Android版本的相关工程文件与代码。
 build_kaleido/jsb-link/frameworks/runtime-src/proj.android-studio目录中一些项目文件的内容供开发者们参考，开发者需要根据自己的实际情况进行修改。
 将build_kaleido/jsb-link/frameworks/runtime-src/proj.android-studio/app/src/org/cocos2dx/javascript/AppActivity.java中的修改拷贝至build/jsb-link/frameworks/runtime-src/proj.android-studio/app/src/org/cocos2dx/javascript/AppActivity.java
 将build_kaleido/jsb-link/frameworks/runtime-src/proj.android-studio/app/src/io整个目录拷贝至build/jsb-link/frameworks/runtime-src/proj.android-studio/app/src/
 将build_kaleido/jsb-link/frameworks/runtime-src/proj.android-studio/app/res/raw整个目录拷贝至build/jsb-link/frameworks/runtime-src/proj.android-studio/app/res/
 在build/jsb-link/frameworks/runtime-src/proj.android-studio/app/中创建libs目录，并将 gengine.aar 拷贝到libs目录。
 修改build/jsb-link/frameworks/runtime-src/proj.android-studio/app/build.gradle，将 minifyEnabled 和 shrinkResources 均设置为 false 。
buildTypes { release { debuggable false jniDebuggable false renderscriptDebuggable false minifyEnabled false shrinkResources false proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39; if (project.hasProperty(&amp;quot;RELEASE_STORE_FILE&amp;quot;)) { signingConfig signingConfigs.release } ... } }  修改build/jsb-link/frameworks/runtime-src/proj.android-studio/app/proguard-rules.pro，在文件最后添加
# keep kaleido for release. -keep public class io.</description>
    </item>
    
    <item>
      <title>Kaleidochain网络配置</title>
      <link>https://docs.kaleidochain.io/wallet/network/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.kaleidochain.io/wallet/network/</guid>
      <description>Kaleidochain生态目前运营有主网络和测试网络。主网络用于正式使用，测试网络用于开发测试使用。
    主网络 测试网络     Network Name Kaleido Main Network Kaleido Test Network   RPC URL https://api.kalscan.io https://api-testnet.kalscan.io   ChainID 888 889   Symbol KAL KAL   Block Explorer https://kalscan.io https://testnet.kalscan.io   Buy KAL Buy KAL with Digifinex Get it Free    Kaleidochain生态由社区共同构建和维护，感谢kalscan.io提供免费的API服务和浏览器支持。</description>
    </item>
    
    <item>
      <title>快速开始</title>
      <link>https://docs.kaleidochain.io/contract/quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.kaleidochain.io/contract/quick-start/</guid>
      <description>普通合约和以太坊上一致，合约创建者负责合约的部署，部署 需要花费一定的Kal，合约调用者调用时需要花费Kal，在调用的交易中指定gas_limit和gas_price。
安装solidity编译器 和以太坊一样使用前需要安装npm的环境，然后再安装solifity的编译器环境
npm install -g solc@0.4.24 # or npm install -g solc-cli@0.4.24 # or sudo apt-get install solc@0.4.24  创建合约文件 创建新文件game.sol，并输入以下内容。
pragma solidity ^0.4.0; contract Game { address public creator; string greeting; function Game(string _greeting) public payable { creator = msg.sender; greeting = _greeting; } function greet() constant returns (string){ return greeting; } function setGreeting(string _newgreeting){ greeting = _newgreeting; } function kill(){ require(msg.sender == creator,&amp;quot;not creator&amp;quot;); suicide(creator); } }  编译部署合约 编译合约代码game.</description>
    </item>
    
    <item>
      <title>使用Truffle开发合约</title>
      <link>https://docs.kaleidochain.io/contract/using-truffle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.kaleidochain.io/contract/using-truffle/</guid>
      <description>合约开发与部署 kaleido合约开发部署完全兼容以太坊,并有更丰富的功能模块,合约开发部署推荐使用truffle框架。
1 环境安装 //nodejs 8.12.0+版本安装 略 //truffle框架4.1.14版本安装 npm install -g truffle@4.1.14  2 truffle项目初始化 git clone https://github.com/truffle-box/bare-box.git  3 项目配置节点 在 truffle-config.js文件找到development,删除注释,配置节点ip,port:
// development: { // host: &amp;quot;127.0.0.1&amp;quot;, // kaleido节点ip,可以使用:106.75.184.214公共节点,也可以是自己搭建的节点) // port: 8545, // 节点rcp服务端口(默认为:8545) // network_id: &amp;quot;*&amp;quot;, // 网络id,默认即可 // },  4 写入合约代码 cd contracts/;vim Game.sol;
pragma solidity ^0.4.0; contract Game { address public creator; string greeting; function Game(string _greeting) public payable { creator = msg.sender; greeting = _greeting; } function greet() constant returns (string){ return greeting; } function setGreeting(string _newgreeting){ greeting = _newgreeting; } function kill(){ require(msg.</description>
    </item>
    
    <item>
      <title>抵押机制</title>
      <link>https://docs.kaleidochain.io/contract/delegation-contract/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.kaleidochain.io/contract/delegation-contract/</guid>
      <description>kaleido使用抵押机制分配合约交易次数,防止用户恶意调用代扣费合约,堵塞网络;24小时内同一创建者的所有合约交易量不能超过创建者(以下称creator)抵押额度值,抵押额度由2个部分组成:创建者账户上Kal额度,以及系统抵押合约上其他用户为creator抵押的Kal额度;用户可以将账户上Kal通过系统抵押合约(Delegation(&amp;ldquo;0x1000&amp;hellip;0004&amp;rdquo;))抵押给其他creator,以增加其合约24小时调用交易次数;
每个交易需要抵押的Kal与gasPrice成正比，目前抵押需要量计算公式为: + 抵押量 = 单次交易抵押量 * 交易次数 + 单次交易抵押量 = gasPrice * C = 1e9 * 2e6 = 2e15 = 0.002 Kal gasPrice 默认值为1e9 Wei
1 solidity合约实例化系统抵押合约 // 系统抵押合约接口 contract DelegationInterface { //用户为creatorAddress抵押Kal function delegate(address creatorAddress) public payable; //取回creatorAddress的抵押 function withdraw(address creatorAddress, uint amount) public; //查询creatorAddress接受到的抵押 function totalReceivedToken(address creatorAddress) public view returns(uint); //查询userAddress为其他creator抵押的额度 function totalDelegatedToken(address userAddress) public view returns(uint) //查询userAddress给 creatorAddress抵押的额度 function getAmount(address userAddress, address creatorAddress) public view returns(uint) } DelegationInterface Delegation = DelegationInterface(0x1000000000000000000000000000000000000004);  2 kalgo控制台中实例化系统合约 kalgo attach http://127.</description>
    </item>
    
    <item>
      <title>权限控制</title>
      <link>https://docs.kaleidochain.io/contract/authority-contract/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.kaleidochain.io/contract/authority-contract/</guid>
      <description>权限控制是kaleido为降低用户使用门槛提供的功能模块,通过权限合约功能，合约的创建者(以下称creator)除了支付合约部署费用,还可以为调用合约的交易代扣手续费,合约调用者(tx.from)无需Kal,就可以使用合约。 creator可以通过系统权限控制合约Authority(0x1000…0003)控制用户代扣费权限,以及代扣收付费交易gasPrice,gasLimit上限。  权限控制合约有2种权限模式; 0-白名单模式(默认),只有加入白名单列表的用户才能发送代扣费交易,其他用户只能发送普通交易调用合约; 1-黑名单模式,加入了黑名单列表的用户不能发送代扣费交易,但仍可以发送普通交易调用合约;
 注:同一creator下的所有合约共享黑/白名单数据列表;
 如果需要使用权限控制合约，需要将合约的创建者调用权限控制合约进行设置，设置属性有代扣费交易允许的最大gasLimit和代扣费交易允许的最大gasPrice 针对每个合约可以单独设置gasLimit和gasPrice，对合约还可以设置一个Mode（白名单还是黑名单） 一个合约Creator共用白名单和黑名单数据，合约单独设置具体采用的模式 合约的gasLimit和gasPrice在没有设置的情况下会继承合约创建者设置的gasLimit和gasPrice 当合约创建者没有通过权限合约进行设置操作时，合约就是普通合约，需要由调用者支持gas费用 即使合约创建者和合约通过权限合约进行了设置操作，用户调用合约时通过指定gaslimit&amp;gt;0和gasPrice&amp;gt;0 时，该交易也可以强制用户付费调用，如果用户账户kal足够调用成功，如果余额不足则调用失败 在合约创建者或合约设置gasLimit和gasPrice情况下，白名单用户或者黑名单中不在的用户在调用合约交易时设置gasLimit=0时，该交易由合约创建者付费，此时gasPrice必须小于或等于合约或者合约创建者设置的gasPrice，否则该交易无效，不会被打包 当合约创建者或者合约需要改变付费模式时可以通过设置gasLimit是否为0进行改变，当gasLimit=0 则合约所有调用者都是调用者付费 合约的白名单模式和黑名单模式可以随时改变 当合约创建者账户余额不足以支付交易费用时，设置为合约付费(gasLimit=0)的交易会失败，此时如果用户可以通过设置交易中gasLimit&amp;gt;0 来强制调用合约   注:给abigen自动生成的代码，也增加了一个函数 TransactExact,这个函数不会自动设置gasLimit,用于发起合约付费交易.
1 权限控制合约使用  solidity合约中实例化权限控制合约
contract AuthorityInterface { //设置用户代扣手续费交易gasPrice上限,合约没设置继承creator function setMaxGasPrice(address creatorOrcontract, uint _price) public returns(bool); //设置用户代扣手续费交易gasLimit上限,合约没设置继承creator function setGasLimit(address creatorOrcontract, uint64 _gas) public returns(bool); //设置权限模式,0-表面的模式(默认),1-黑名单模式，只对合约有效 function setModel(address contract, uint _model) public returns(bool); //查询合约 MaxGasPrice,GasPrice,Mode三项的设置 function getAll(address contractAddress) public view returns(uint price,uint64 gas,uint mod); //添加用户memberAddress到自己黑名单列表 function addBlack(address memberAddress ) public returns(bool); //添加用户memberAddress到自己白名单列表 function addWhite(address memberAddress ) public returns(bool); //将用户memberAddress从自己黑名单列表移除 function removeBlack(address memberAddress ) public returns(bool); //将用户memberAddress从自己白名单列表移除 function removeWhite(address memberAddress ) public returns(bool); //用户memberAddress是否在合约contractAddress的黑名单 function isBlack(address contractAddress,address memberAddress ) public view returns(bool); //用户memberAddress是否在合约contractAddress的白名单 function isWhite(address contractAddress,address memberAddress ) public view returns(bool); } AuthorityInterface Authority = AuthorityInterface(0x1000000000000000000000000000000000000003);  kalgo控制台实例化权限控制合约</description>
    </item>
    
    <item>
      <title>合约创建人</title>
      <link>https://docs.kaleidochain.io/contract/contract-creator/</link>
      <pubDate>Thu, 23 May 2019 18:29:20 +0800</pubDate>
      
      <guid>https://docs.kaleidochain.io/contract/contract-creator/</guid>
      <description>在Kaleido Chain中，系统内置了一个系统合约，记录了所有合约的创建人地址。创建人地址就是部署合约的外部账号地址。如果一个合约A是由另一个合约B部署的，合约A的创建人地址就自动继承合约B的创建人地址。该创建人地址在合约的构造函数中也可以成功获取。
合约创建人有多种用途。第一种用途就是合约抵押机制。合约要可执行，需要先抵押一定量的token到其创建人账户中。系统自动识别合约的创建人抵押量，来计算合约可被调用的次数。第二种用途就是权限管理。很多情况下，一个合约都需要与一个超级管理员关联，以限制部分接口的调用权限。合约创建人机制默认提供了一直超级管理员的可选项，简化了相关合约的开发。
要在Solidity中获取一个合约的创建人，需要使用以下代码：
import &#39;lib/kaleido/SysContract.sol&#39;; contract Demo { // WithDraw - only creator can get the token function WithDraw(uint amount) public { require(msg.sender == SysContract.getCreator(address(this))); msg.sender.transfer(amount); } }  </description>
    </item>
    
    <item>
      <title>获取随机数</title>
      <link>https://docs.kaleidochain.io/contract/solidity-rand/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.kaleidochain.io/contract/solidity-rand/</guid>
      <description>区块链上的合约经常会需要产生随机值，目前的区块链一般采用交易hash或者区块hash产生随机值，但是这些都不是完全独立的随机值，可以被矿工或者交易发起者进行攻击或者利用。
Kaleido提供了真正不可预测的安全可靠的随机数机制。Kaleido的随机性主要有以下几个来源：
 区块种子 受益于VRF算法和Algorand共识算法机制，每个区块中的随机数种子是无法被任何人（包括提案人自己）提前预测的 交易Hash 发起获取随机数的交易hash 内部序列号 区块内部使用种子的次数，除了区块构造者，其他人无法提取预测 用户数据 由调用者传入的任意数据，可选  因此，Kaleido所产生的随机数，是一个真正不可预测的安全可靠的随机数。
你可以通过内置函数直接获取随机数，代码如下：
function random() public view returns(uint256) { uint256[1] memory output; assembly { if iszero(staticcall(not(0), 101, 0x0, 0x0, output, 0x20)) { revert(0, 0) } } return output[0]; }  也可以获取过去某个区块的随机种子（限制最多能取到最近2048个区块）：
function getSeed(uint height) public view returns(uint256) { uint256[1] memory input; uint256[1] memory output; input[0] = height; assembly { if iszero(staticcall(not(0), 100, input, 0x20, output, 0x20)) { revert(0, 0) } } return output[0]; }  以上函数已经在有封装好的函数库可以直接调用，具体可参考SysContract.</description>
    </item>
    
    <item>
      <title>委托池</title>
      <link>https://docs.kaleidochain.io/mining/delegate-pool/</link>
      <pubDate>Thu, 23 May 2019 18:27:26 +0800</pubDate>
      
      <guid>https://docs.kaleidochain.io/mining/delegate-pool/</guid>
      <description>除了持有token的外部账户可以参与挖矿外，持有token的合约也可以参与挖矿。这为多种形式的挖矿提供了技术机制。
委托池的用途 在你初期没有token的时候，你可以部署一个官方提供的委托合约代码，向官方申请委托授权。官方经过审核后，就会为你的合约进行抵押和委托。
通过委托池挖矿，你也可以实现集中多人的小量token到一起来参与挖矿的功能。你只需要部署自己的委托池合约，并确保合约可以执行（参考合约抵押机制）。发布自己的合约地址，
最后，你使用自己的委托合约注册矿工，就可以开始挖矿。
委托池的实现 外部账户注册矿工是通过发起交易的方式，调用系统矿工合约来注册的。合约的注册方式有点不同。合约必须要实现一个调用系统矿工合约进行注册的接口，外部账户或其它合约通过调用该接口来注册矿工。
在有多层合约嵌套调用时，需要注意以下细节。在注册系统矿工合约时，谁是矿工取决于msg.sender是谁。正常情况下，应该使用call调用系统矿工合约时，来实现将合约自己注册成为矿工。如果是要将调用合约的外部账号注册成为矿工，那么就需要使用delegatecall来调用，以使得msg.sender继承自调用者。具体可参考关于call和delegatecall的区别说明。
注册成为矿工时可以指定受益人，因此合约提供的注册矿工的接口通常都要做权限管理，限制某些地址才能调用、或者某些地址才能成为受益人，以防止收益人账号被他人修改。最简单的实现是，只要合约的创建人才可调用该接口。
下面是一个简单但功能完整的委托池的实现：
import &amp;quot;./lib/kaleido/SysContract.sol&amp;quot;; import &amp;quot;./lib/math/SafeMath.sol&amp;quot;; contract DelegatePoolDemo { using SafeMath for uint256; mapping(address=&amp;gt;uint256) private _balances; // register self into minerdb function registerMiner(bytes minerkey) public { require(msg.sender == SysContract.creatorOf(address(this))); SysContract.minerRegister(minerkey); } /** * @dev Gets the balance of the specified address. * @param owner The address to query the balance of. * @return A uint256 representing the amount owned by the passed address.</description>
    </item>
    
  </channel>
</rss>
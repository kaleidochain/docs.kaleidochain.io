[
{
	"uri": "https://docs.kaleidochain.io/",
	"title": "kaleidochain",
	"tags": [],
	"description": "",
	"content": " Kaleidochain 欢迎查看Kaleidochain文档\n  本文档正在频繁更新，请及时查看最新内容。\n "
},
{
	"uri": "https://docs.kaleidochain.io/introduction/",
	"title": "介绍",
	"tags": [],
	"description": "",
	"content": " Kaleido是新一代高性能区块链游戏平台。它采用了公开透明的、纯PoS区块链共识技术，实现了纯分布式的、可扩展的和高安全的区块链。它还提供了可信P2P传输、零知识证明等机制，尤其使得游戏类应用开发更为便捷，运行效果更好。\n测试网络 目前，我们的测试网络正在运营。该文档主要以测试网为主，说明如何安装、配置并加入Kaleido区块链。 主链发布后，该文档也会相应地更新。\n参与社区讨论 你可以在我们的社区与Kaleido开发者和其他社区成员一起交流与讨论，可以获得更有针对性的帮助和信息。\n  社区正在建设中，稍后会在这里公开。\n 了解最新项目进展 你可以在我们的博客了解项目的最新进展情况。\n"
},
{
	"uri": "https://docs.kaleidochain.io/getting-started/installing-node/",
	"title": "安装运行节点",
	"tags": [],
	"description": "",
	"content": " 我们目前只提供基于docker的二进制版本，仅需要安装docker并拉取镜像即可。\ndocker pull kaleidochain/client  准备运行目录 首次运行，你需要准备一个数据目录，该目录可以在任意位置，但我们建议使用$HOME/.kaleido。为了后面使用方便，可以将该目录设置为环境变量KALEIDO_HOME。选取的目录将交由kaleido进行使用和管理，因此建议选择的目录下不要存储其它数据和文件。\nmkdir $HOME/.kaleido export KALEIDO_HOME=$HOME/.kaleido echo $KALEIDO_HOME  后面的命令中，我们将使用环境变量$KALEIDO_HOME来表示该目录。\n作为全节点启动 使用以下命令启动一个名为kalnode的全节点，通过参数--testnet使其连接到测试网络。\ndocker run -d --name kalnode -p 38883:38883 -p 38883:38883/udp \\ -v $KALEIDO_HOME:/root/.ethereum kaleidochain/client --testnet  启动后，该节点会连接上测试网络，下载区块数据。 我们可以通过IPC连上该节点，查看连接上的peer节点数、当前区块高度等。\ndocker exec -it kalnode geth --testnet attach \u0026gt; net.peerCount 15 \u0026gt; eth.blockNumber 17568 \u0026gt; exit  如果你想让自己的节点也显示在网络状态页面中，增加参数--ethstats \u0026quot;your-node-name:bpFe9vOevM@stats-testnet.kaleidochain.io:38881\u0026quot;启动即可，其中your-node-name需要使用自己的节点名称来代替。\ndocker run -d --name kalnode -p 38883:38883 -p 38883:38883/udp \\ -v $KALEIDO_HOME:/root/.ethereum kaleidochain/client --testnet \\ --ethstats \u0026quot;your-node-name:bpFe9vOevM@stats-testnet.kaleidochain.io:38881\u0026quot;  作为服务节点启动 如果你有钱包或其它应用，就需要在全节点的基础上，通过--rpc和--ws参数来开启RPC和WS服务，同时映射8545/8546端口到主机。 这里需要注意的是，由于节点运行在docker容器中，所以RPC和WS服务监听的IP必须是0.0.0.0。\ndocker stop kalnode \u0026amp;\u0026amp; docker rm kalnode docker run -d --name kalnode \\ -p 38883:38883 -p 38883:38883/udp -p 8545:8545 -p 8546:8546 \\ -v $KALEIDO_HOME:/root/.ethereum \\ kaleidochain/client --testnet \\ --rpc --rpcaddr 0.0.0.0 --rpcvhosts '*' \\ --ws --wsaddr 0.0.0.0 --wsorigins '*'  我们也可以使用如下命令，直接连接RPC和WS服务来使用。\ndocker exec -it kalnode geth attach http://127.0.0.1:8545 \u0026gt; eth.blockNumber 17568 \u0026gt; exit docker exec -it kalnode geth attach http://127.0.0.1:8546 \u0026gt; eth.blockNumber 17568 \u0026gt; exit  接下来，你的钱包应用就可以选择连接上你自己的全节点了。\n如果需要查看详细日志，我们可以带上日志参数--vmodule 'p2p/discv5/*=3,p2p/discover/*=3,*=5'重新启动全节点，然后就可以使用docker logs命令查看到详细日志。\ndocker stop kalnode \u0026amp;\u0026amp; docker rm kalnode docker run -d --name kalnode \\ -p 38883:38883 -p 38883:38883/udp -p 8545:8545 -p 8546:8546 \\ -v $KALEIDO_HOME:/root/.ethereum \\ kaleidochain/client --testnet \\ --rpc --rpcaddr 0.0.0.0 --rpcvhosts '*' \\ --ws --wsaddr 0.0.0.0 --wsorigins '*' \\ --vmodule 'p2p/discv5/*=3,p2p/discover/*=3,*=5' docker logs --tail=100 -f kalnode  更新版本 如有新版本，只需要更新docker镜像，删除之前的容器，重新创建新的容器即可。\ndocker pull kaleidochain/client docker stop kalnode \u0026amp;\u0026amp; docker rm kalnode docker run -d --name kalnode \\ -p 38883:38883 -p 38883:38883/udp \\ -v $KALEIDO_HOME:/root/.ethereum \\ kaleidochain/client --testnet docker logs --tail=100 -f kalnode  "
},
{
	"uri": "https://docs.kaleidochain.io/mining/create-miner-key/",
	"title": "创建挖矿凭证",
	"tags": [],
	"description": "",
	"content": "我们首先需要创建挖矿公私钥对，得到挖矿凭证minerkey。\n假设当前区块高度为12065，通常情况下，你想尽快开始挖矿，那么你应该选择比当前区块高度略大或相等的高度值，这里我们选取12100，来生成从12100高度开始挖矿的minerkey，这个minerkey属于12100高度所在区间。这个开始高度由参数--begin指定。此外，在生成minerkey的时候，还要通过--miner指明矿工账号，--coinbase指明受益人的地址（即接收区块奖励的地址）。\n如下命令就是用来生成一个属于12100高度所在区间的挖矿凭证minerkey，矿工账号miner和受益人coinbase都是0x958DE277Cde7f5808a910dBf6f7854DF52C25833。\ndocker run --rm -v $KALEIDO_HOME:/root/.ethereum \\ kaleidochain/client --testnet makeminerkey \\ --begin 12100 \\ --miner 0x958DE277Cde7f5808a910dBf6f7854DF52C25833 \\ --coinbase 0x958DE277Cde7f5808a910dBf6f7854DF52C25833  以上命令执行需要一定的时间，完成后输出结果最后内容如下，这里给出了生成的minerkey，其内部包含了受益人coinbase的地址、起始高度begin、区间的结束高度end等信息。\nUsing following params: contract address: 0x1000000000000000000000000000000000000002 miner: 0x958DE277Cde7f5808a910dBf6f7854DF52C25833 coinbase: 0x958DE277Cde7f5808a910dBf6f7854DF52C25833 begin: 12100 end: 1000000 Generate minerkey: 0x2c91689a000000000000000000000000958de277cde7f5808a910dbf6f7854df52c258330000000000000000000000000000000000000000000000000000000000000002c0bd0fe9db297d84f28da5ff851e8c7f30dab5f45ee7891311d78d7bbda6e5d878c98aab5aa50746b052e423385c497ba38066c2f6f6dc05c600a5eab6110b02f9e77403c5becfc80251c4d038e50d3a6b99bd1db88ca7547b8abc134e8235610000000000000000000000000000000000000000000000000000000000002f44  以上输出的最后一行中的0x2c9168...就是挖矿凭证minerkey，其作用相当于公钥。对应的私钥数据存储在节点的数据目录$KALEIDO_HOME/testnet/geth/下以ephemeralkey为前缀的目录，该数据通常比较大。\n"
},
{
	"uri": "https://docs.kaleidochain.io/dapp-developer/resources/",
	"title": "开发资源",
	"tags": [],
	"description": "",
	"content": " 斗地主Demo   斗地主Demo源码   斗地主Demo APK  SDK下载   iOS版本的预编译SDK   Android版本的预编译SDK  "
},
{
	"uri": "https://docs.kaleidochain.io/contract/quick-start/",
	"title": "快速开始",
	"tags": [],
	"description": "",
	"content": " 普通合约和以太坊上一致，合约创建者负责合约的部署，部署 需要花费一定的Kal，合约调用者调用时需要花费Kal，在调用的交易中指定gas_limit和gas_price。\n安装solidity编译器 和以太坊一样使用前需要安装npm的环境，然后再安装solifity的编译器环境\nnpm install -g solc@0.4.24 # or npm install -g solc-cli@0.4.24 # or sudo apt-get install solc@0.4.24  创建合约文件 创建新文件game.sol，并输入以下内容。\npragma solidity ^0.4.0; contract Game { address public creator; string greeting; function Game(string _greeting) public payable { creator = msg.sender; greeting = _greeting; } function greet() constant returns (string){ return greeting; } function setGreeting(string _newgreeting){ greeting = _newgreeting; } function kill(){ require(msg.sender == creator,\u0026quot;not creator\u0026quot;); suicide(creator); } }  编译部署合约 编译合约代码game.sol，得到ABI文件(Game_sol_Game.abi) 和二进制文件(Game_sol_Game.bin):\nsolcjs –abi –bin Game.sol  接下来使用命令行连接节点部署合约。\n这里假设你在本地运行了一个节点，并开启了8545端口，你需要使用命令geth attach http://127.0.0.1:8545连接到你的节点。如果没有，你可以使用测试网络的公开服务节点来代替geth attach http://testnet.kaleidochain.io:8545\n在打开的终端命令行中，执行以下代码：\nvar gameabi = [{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;creator\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;kill\u0026quot;,\u0026quot;outputs\u0026quot;:[],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_newgreeting\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;string\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;setGreeting\u0026quot;,\u0026quot;outputs\u0026quot;:[],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;greet\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;string\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_greeting\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;string\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;constructor\u0026quot;}]; var gamebin = \u0026quot;0x\u0026quot;+\u0026quot;60806040526040516105b53803806105b583398101806040528101908080518201929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806001908051906020019061007c929190610083565b5050610128565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100c457805160ff19168380011785556100f2565b828001600101855582156100f2579182015b828111156100f15782518255916020019190600101906100d6565b5b5090506100ff9190610103565b5090565b61012591905b80821115610121576000816000905550600101610109565b5090565b90565b61047e806101376000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806302d05d3f1461006757806341c0e1b5146100be578063a4136862146100d5578063cfae32171461013e575b600080fd5b34801561007357600080fd5b5061007c6101ce565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100ca57600080fd5b506100d36101f3565b005b3480156100e157600080fd5b5061013c600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506102f1565b005b34801561014a57600080fd5b5061015361030b565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610193578082015181840152602081019050610178565b50505050905090810190601f1680156101c05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156102b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f6e6f742063726561746f7200000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b80600190805190602001906103079291906103ad565b5050565b606060018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103a35780601f10610378576101008083540402835291602001916103a3565b820191906000526020600020905b81548152906001019060200180831161038657829003601f168201915b5050505050905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106103ee57805160ff191683800117855561041c565b8280016001018555821561041c579182015b8281111561041b578251825591602001919060010190610400565b5b509050610429919061042d565b5090565b61044f91905b8082111561044b576000816000905550600101610433565b5090565b905600a165627a7a723058200a8b27b1fc751aab13bbf1db698f2f9c0835fd1b5a6dbd4e77ee8cb89f0939950029\u0026quot;; var gameContract = web3.eth.contract(gameabi); var gameToken = gameContract.new(\u0026quot;construct1\u0026quot;,{from:eth.accounts[0],data:gamebin,gas:1000000},function (e,contract){if(contract.address != \u0026quot;undefined\u0026quot; ){console.log(\u0026quot;game contract success:\u0026quot;+contract.address+\u0026quot; \u0026quot;+contract.transactionHash);} else{console.log(\u0026quot;game contract fail\u0026quot;)}}); // test call gameToken.greet();  "
},
{
	"uri": "https://docs.kaleidochain.io/mining/register-miner-key/",
	"title": "注册挖矿凭证",
	"tags": [],
	"description": "",
	"content": " 要使minerkey可以挖矿，还需要有投票权。这需要使用自己的账户，调用矿工合约0x1000000000000000000000000000000000000002，将自己的矿工账户与挖矿凭证关联起来。这相当于将自己持有的token对应的投票权，委托给了这个minerkey。minerkey只有被委托后，才会具有一定的投票权，才能在挖矿中使用。\n注册矿工本质上是一次合约调用，有两种方式： 1. 通过钱包注册 2. 通过命令行注册\n使用钱包注册（推荐） 在钱包中，用你的账户，向测试链发送一笔交易，接收地址为矿工合约地址0x1000000000000000000000000000000000000002，data填写为上面生成的minerkey内容即可。在某些钱包客户端中，交易页面默认没有Data字段，需要在设置中打开。\n注册一次需要的gas费用大约在200000左右，建议填写gas费用为210000，或者在类似MetaMask的客户端中，选择Fastest来发送。gas太少会导致交易执行失败。\n使用命令行注册 使用命令行向矿工合约地址0x1000000000000000000000000000000000000002发送一笔交易，将data字段填写为上面生成的minerkey即可。\ndocker exec -it kalnode geth --testnet attach \u0026gt; myaddr = '0x958DE277Cde7f5808a910dBf6f7854DF52C25833'; \u0026gt; personal.unlockAccount(myaddr, 'your-password'); \u0026gt; hash = eth.sendTransaction({ from: myaddr, to: '0x1000000000000000000000000000000000000002', gas: 200000, gasPrice: 20000000000, data: '0x2c91689a0000000000000000000000001805b7ee5dd340981628b81d5d094c44a027bdc500000000000000000000000000000000000000000000000000000000000000028b259c4c04e61089ce9c0554339fa9dca01f6ef8c7de4f9268add46cd77c6d0fa668a15f6fec02b01d8f37a80a29cf62360aa69b975fa94b23ec6a32d8abf87d3e4c8f41c3c49e6d765aa7449dc510c0cf95a8ba714bd8abecf16e69df9318e200000000000000000000000000000000000000000000000000000000000003e8' }); \u0026gt; admin.sleepBlocks(2); \u0026gt; eth.getTransactionReceipt(hash);  "
},
{
	"uri": "https://docs.kaleidochain.io/getting-started/creating-new-account/",
	"title": "创建新的账户",
	"tags": [],
	"description": "",
	"content": " 如果你还没有账户，可以按照本指引创建一个属于你自己的账户。这里介绍了通过成熟可信的钱包工具生成和命令行生成的方法。\n使用钱包客户端生成账户（推荐） 你可以使用现有的以太坊钱包，连接到kaleido区块链网络后，创建新的账户。\n下面以MetaMask为例，说明连接kaleido测试网络和创建账户的流程。\n在MetaMask中，点击右上角的下拉菜单。在打开的列表中，点击最底部的Custom RPC。在New Network文本框中，点击Show Advanced Options后，显示出4个文本框，分别填写如下信息：\n New RPC URL: http://testnet.kaleidochain.io:8545 ChainID: 889 Symbol: KAL Nickname: Kaleido Test Network  填写后如下图。\n最后点击旁边的Save按钮。\n当最上方的网络名称栏显示Kaleido Test Network即表示连接成功。\n然后在MetaMask中创建账户即可。一旦你有了token，就可以方便的使用钱包进行转账了。\n使用命令行生成账户 在运行你自己的节点之后，你还可以通过命令行生成一个新账户，具体如下。将其中的your-password替换为你自己的密码即可。\ndocker exec -it kalnode geth --testnet attach \u0026gt; personal.newAccount('your-password') \u0026quot;0xe40046ef6f0d4a05d90ca62d8ead47e21c886fc1\u0026quot; \u0026gt; eth.accounts [\u0026quot;0xe40046ef6f0d4a05d90ca62d8ead47e21c886fc1\u0026quot;]  "
},
{
	"uri": "https://docs.kaleidochain.io/getting-started/",
	"title": "开始",
	"tags": [],
	"description": "",
	"content": "我们建立了横跨各主要大陆的全球性区块链测试网络，你可以从网络状态页面查看到网络的运行情况。通过下面的步骤，你也可以加入这个测试网络。\n 安装运行节点   创建新的账户   获取测试网KAL   测试你的应用   "
},
{
	"uri": "https://docs.kaleidochain.io/mining/running-node-as-miner/",
	"title": "运行挖矿节点",
	"tags": [],
	"description": "",
	"content": " 一旦注册好矿工合约，将投票权成功委托给了挖矿凭证，那么就可以使用该挖矿凭证挖矿了。加上参数--mine --etherbase \u0026lt;miner addr\u0026gt;重新启动前面的全节点即可。\n注意这里的--etherbase的值，应该写你刚才发起矿工注册的交易的账号地址（而不是收益地址）。挖矿程序会使用该地址，在挖矿合约中查找你注册的挖矿信息。\ndocker stop kalnode \u0026amp;\u0026amp; docker rm kalnode docker run -d --name kalnode -v $KALEIDO_HOME:/root/.ethereum \\ -p 38883:38883 -p 38883:38883/udp \\ kaleidochain/client --testnet \\ --mine --etherbase 'your-address'  可以使用以下命令查询验证你的节点是否正在挖矿：\ndocker exec -it kalnode geth --testnet attach \u0026gt; eth.mining true  如果仍然没有开始挖矿，可能有几个原因：\n minerkey没有注册成功 节点启动时的参数没有设置，或者没有与minerkey匹配 没有token，或只有少于1个单位的token 区块高度还没有到你注册的区间范围内 minerkey对应的私钥数据目录不存在或不匹配  如有以上问题，可以查阅之前的文档，重新操作一次。或者将相关信息和问题发到社区中寻求帮助。\n持续挖矿 由于挖矿凭证是有区块范围的，区块高度超过相应范围后，之前的挖矿凭证就失效了。你需要提前为下一个区间范围注册好另一个挖矿凭证，以保持持续不间断的挖矿。\n为避免矿工合约数据过大，矿工合约限制了最多能提前注册未来1个区间。 你可以提前为未来1个区间生成minerkey并提前注册，并预估好这几个区间跑完的时间，设置好提醒方式，以提醒你再次注册。 在测试网络中，1个区间大约可以跑24天。你可以设置每2~3周来检查或注册一次。\n"
},
{
	"uri": "https://docs.kaleidochain.io/getting-started/getting-testnet-token/",
	"title": "获取测试网KAL",
	"tags": [],
	"description": "",
	"content": "我们创建了一个免费领取kaleidochain测试网络KAL Token的页面 ，点击进去，填写自己的账户地址即可领取。\n"
},
{
	"uri": "https://docs.kaleidochain.io/contract/using-truffle/",
	"title": "使用Truffle开发合约",
	"tags": [],
	"description": "",
	"content": "除了通过geth命令行进行部署外也可以通过truffle环境进行部署。\n首先安装truffle：\nnpm install –g truffle@4.1.14  初始化truffle项目：\nmkdir bare-box cd bare-box truffle init  并配置节点信息：\n在 truffle-config.js文件找到development,删除注释,配置节点ip,port为你要连接的节点的信息。\ndevelopment: { host: \u0026quot;127.0.0.1\u0026quot;, // Localhost (default: none) port: 8545, // Standard Ethereum port (default: none) network_id: \u0026quot;*\u0026quot;, // Any network (default: none) },  在目录contracts下撰写合约文件Game.sol（注: 文件名称必须与合约名称相同），示例合约内容如下：\npragma solidity ^0.4.0; contract Game { address public creator; string greeting; function Game(string _greeting) public payable { creator = msg.sender; greeting = _greeting; } function greet() constant returns (string){ return greeting; } function setGreeting(string _newgreeting){ greeting = _newgreeting; } function kill(){ require(msg.sender == creator,\u0026quot;not creator\u0026quot;); suicide(creator); } }  在目录migrations下编写合约部署脚本2_initial_game.js，示例内容如下：\nconst Game = artifacts.require(\u0026quot;Game\u0026quot;); module.exports = function(deployer) { deployer.deploy(Game,\u0026quot;Hello world!\u0026quot;); };  最后，调用truffle命令一键编译部署合约:\ntruffle migrate --reset;  "
},
{
	"uri": "https://docs.kaleidochain.io/getting-started/testing-your-dapp/",
	"title": "测试你的应用",
	"tags": [],
	"description": "",
	"content": "Kaleidochain官方维护了一个测试网络的全节点testnet.kaleidochain.io，开放了RPC（8545端口）和WS（8546端口）接口，你可以使用命令行或者钱包连接到测试网络，部署和测试你的应用。\n部署时所需要的token，可以通过测试网络KAL分发页面免费领取。\n此外，你也可以启动一个测试网节点，待区块数据同步好后(可能需要数小时时间)，即可开始测试。\n"
},
{
	"uri": "https://docs.kaleidochain.io/contract/authority-contract/",
	"title": "权限管理合约",
	"tags": [],
	"description": "",
	"content": " kaleido扩展了合约的权限管理功能。通过权限管理合约，可以实现：\n 用户调用产生的gas消耗由合约支付 合约调用黑名单，禁止某些用户调用合约  合约创建者可以控制调用权限和每次的调用花费上限。\n下面的示例说明这种合约的使用方式。\n环境准备 参考使用Truffle开发合约中的内容，配置好开发环境。\n编写合约 游戏合约指调用合约的手续费用由合约自己支付，调用者（用户）不需要支付Kal，这样使得游戏能被所有用户都使用。为了达到这个目的需要将游戏合约注册到系统合约里面，系统合约地址为sysytem(0x1000000000000000000000000000000000000001)，当注册到这个系统合约后，该合约就会在调用的时候从合约地址支付，如果合约地址中Kal为0，调用就会失败。 游戏合约的手续费因为由合约本身支付，所以为了防止无效支付和支付过高手续费用，游戏合约需要和权限合约配合使用，通过权限合约可以控制用户调用的权限，同时通过在权限合约中指定gas_limit和gas_price作为调用合约交易中的上限。权限合约为Authority.sol。 权限合约可以在多个合约之间共享。 在实际使用中需要把游戏合约地址和对应的权限合约地址注册到系统合约中。 system. setAuthContractAddr(address(authority));\n在权限合约中设置对应的gas_limit和gas_price： authority.setGas(500000000,1000000);\n在权限合约中将用户添加到白名单: authority.grant(addr);\n在权限合约中将用户移除白名单,白名单外的用户调用game合约的交易是不会被区块打包: authority.revoke(addr);\n便于白名单合约管理,将拥有者权限移交给用户账号: authority.changeOwner(msg.sender);\n普通逻辑合约Game.sol例子:\npragma solidity ^0.4.0; contract AuthorityInterface{ function setPayer() public; function setGas(uint256 price, uint64 gaslimit) public; function grant(address addr)public; function revoke(address addr) public; } contract AuthIndexInterface{ function setAuthContractAddr(address add) public; function getAuthContractAddr(address add) public view returns(address); } contract Game{ address public creator; string greeting; AuthIndexInterface AuthIndex = AuthIndexInterface(0x1000000000000000000000000000000000000001); AuthorityInterface Authority; function Game(string _greeting) public payable{ creator = msg.sender; greeting = _greeting; } function () payable {} function setauthority(address addr) returns(bool){ require(msg.sender == creator,\u0026quot;not creator\u0026quot;); Authority = AuthorityInterface(addr); AuthIndex.setAuthContractAddr(addr); Authority.setGas(10000000000,1000000); Authority.grant(msg.sender); return true; } function grant(address addr) returns(bool){ require(msg.sender == creator,\u0026quot;not creator\u0026quot;); Authority.grant(addr); return true; } function revoke(address addr) returns(bool){ require(msg.sender == creator,\u0026quot;not creator\u0026quot;); Authority.revoke(addr); return true; } function greet() constant returns (string){ return greeting; } function setGreeting(string _newgreeting){ greeting = _newgreeting; } function kill(){ require(msg.sender == creator,\u0026quot;not creator\u0026quot;); suicide(creator); } }  部署权限管理合约Authority.sol，该合约代码是kaleido内置的，不能随意修改。\npragma solidity ^0.4.20; contract Authority { enum Payer { NOTSET, SELF } enum Permission { NOTSET, PERMIT, FORBID } uint version; address owner; address next; mapping(address =\u0026gt; uint256) addr2opauth; mapping(address =\u0026gt; uint256) addr2payer; mapping(address =\u0026gt; uint256) addr2gasprice; mapping(address =\u0026gt; uint64) addr2gaslimit; mapping(address =\u0026gt; uint256) addr2auth; constructor() public { owner = msg.sender; next = address(0); version = 0x01; } function changeOwner(address newOwner) public { assert(msg.sender == owner); owner = newOwner; } function getOwner() public view returns(address) { return owner; } function setNewAuthority(address newNext) public { assert(msg.sender == owner); next = newNext; } function getNextAuthority() public view returns(address) { return next; } function grantContractAuth(address addr) public { assert(msg.sender == owner); addr2opauth[addr] = uint(Permission.PERMIT); } function revokeContractAuth(address addr) public { assert(msg.sender == owner); addr2opauth[addr] = uint(Permission.FORBID); delete addr2opauth[addr]; } function setPayer() public { addr2payer[msg.sender] = uint256(Payer.SELF); } function getPayer(address contractAddr) public view returns(uint256){ return addr2payer[contractAddr]; } function setGas(uint256 price, uint64 gaslimit) public { addr2payer[msg.sender] = uint(Payer.SELF); addr2gasprice[msg.sender] = price; addr2gaslimit[msg.sender] = gaslimit; } function getGas(address contractAddr) public view returns(uint256, uint64){ return (addr2gasprice[contractAddr], addr2gaslimit[contractAddr]); } function getContractInfo(address contractAddr) public view returns(uint256, uint256, uint256, uint64){ return (addr2opauth[contractAddr], addr2payer[contractAddr], addr2gasprice[contractAddr], addr2gaslimit[contractAddr]); } function grant(address addr) public { addr2auth[addr] = uint(Permission.PERMIT); } function revoke(address addr) public { require(uint(Permission.PERMIT) == addr2opauth[msg.sender]); addr2auth[addr] = uint(Permission.FORBID); delete addr2auth[addr]; } function getAuth(address addr) public view returns(uint256) { return addr2auth[addr]; } }  部署合约 编写合约部署脚本2_initial_game.js，其中deployer.deploy(Game,\u0026quot;param1\u0026quot;,{value:100000000000000000})中转入合约的Kal用于合约调用费用。\nconst Game = artifacts.require(\u0026quot;Game\u0026quot;); const authority = artifacts.require(\u0026quot;Authority\u0026quot;); module.exports = function(deployer){ var gameToken,authToken; deployer.then(function(){ return deployer.deploy(Game,\u0026quot;param1\u0026quot;,{value:100000000000000000}); }).then(function(result){ gameToken = result; return deployer.deploy(authority); }).then(function(result){ authToken = result; }).then(function(result){ gameToken.setauthority(authToken.address); authToken.grantContractAuth(gameToken.address); }); }  编译部署：\ntruffle migrate --reset  测试 使用命令行连接到测试节点，执行以下代码：\nvar gameabi = [{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;creator\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;addr\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;grant\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;addr\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;revoke\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;greet\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;string\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_newgreeting\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;string\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;setGreeting\u0026quot;,\u0026quot;outputs\u0026quot;:[],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;}]; var game= web3.eth.contract(gameabi).at(\u0026quot;game合约地址\u0026quot;); //只读函数都能成功返回 game.greet({from:eth.accounts[0]}); game.greet({from:eth.accounts[1]}); //success game.setGreeting(\u0026quot;test\u0026quot;,{from:game.creator()}); //failure:contract permission denied. game.setGreeting(\u0026quot;test\u0026quot;,{from:eth.accounts[1]}); //加入白名单 game.grant(eth.accounts[1],{from:game.creator()}); //success game.setGreeting(\u0026quot;test\u0026quot;,{from:eth.accounts[1]}); //移除白名单 game.revoke(eth.accounts[1],{from:game.creator()}); //failure:contract permission denied. game.setGreeting(\u0026quot;test\u0026quot;,{from:eth.accounts[1]});  "
},
{
	"uri": "https://docs.kaleidochain.io/contract/contract-creator/",
	"title": "合约创建人",
	"tags": [],
	"description": "",
	"content": "在Kaleido Chain中，系统内置了一个系统合约，记录了所有合约的创建人地址。创建人地址就是部署合约的外部账号地址。如果一个合约A是由另一个合约B部署的，合约A的创建人地址就自动继承合约B的创建人地址。\n合约创建人有多种用途。第一种用途就是合约抵押机制。合约要可执行，需要先抵押一定量的token到其创建人账户中。系统自动识别合约的创建人抵押量，来计算合约可被调用的次数。第二种用途就是权限管理。很多情况下，一个合约都需要与一个超级管理员关联，以限制部分接口的调用权限。合约创建人机制默认提供了一直超级管理员的可选项，简化了相关合约的开发。\n要在Solidity中获取一个合约的创建人，需要使用以下代码：\nimport 'lib/kaleido/SysContract.sol'; contract Demo { // WithDraw - only creator can get the token function WithDraw(uint amount) public { require(msg.sender == SysContract.creatorOf(address(this))); msg.sender.transfer(amount); } }  "
},
{
	"uri": "https://docs.kaleidochain.io/mining/",
	"title": "挖矿",
	"tags": [],
	"description": "",
	"content": "在Kaleido中，除了账户的公私钥对外，还有另外一种矿工公私钥对minerkey。账户通过调用矿工合约minerdb注册接口，将自己与矿工公私钥对关联，表示授权该矿工公私钥使用自己持有的token权重进行挖矿。\n由于在挖矿过程中，需要使用到矿工私钥，因此这样的实现方案使得不需要token持有账户的私钥即可使用该账户对应的投票权，避免了暴露token持有账户私钥的可能性，极大地提升了安全性。\n此外，每一次账户和矿工公私钥的关联都不是永久的，因为矿工公私钥是有有效期的。生成矿工公私钥时，需要选择一个区块链的高度范围，那么该关联授权仅在对应高度范围内才有效。\n测试链将区块链的高度按1,000,000大小划分为一个个区间，即[0, 1,000,000)是第一个区间，[1,000,000, 2,000,000)是第二个区间，以此类推。生成矿工公私钥时，只能自由选择起始高度，结束高度就是起始高度对应区间的最后一个区块，相当于将关联授权的有效期限制在起始高度所在区间内。\n按照后续步骤，启动你自己的挖矿节点。\n 创建挖矿凭证   注册挖矿凭证   运行挖矿节点   委托池   "
},
{
	"uri": "https://docs.kaleidochain.io/contract/",
	"title": "智能合约",
	"tags": [],
	"description": "",
	"content": "Kaleido是基于Algorand共识算法的公链，系统采用的是账户模型和基于EVM虚拟机的智能合约系统，智能合约开发语言采用的是Solidity，完全兼容以太坊的开发生态。链上合约的调用需要有合约抵押和gas消耗，gas消耗机制与以太坊相同，合约抵押机制下面有详细说明。\n 快速开始   使用Truffle开发合约   权限管理合约   合约创建人   "
},
{
	"uri": "https://docs.kaleidochain.io/dapp-developer/",
	"title": "DApp开发",
	"tags": [],
	"description": "",
	"content": "Kaleido链除了可以开发以太坊上基于Solidity的智能合约外，还能开发结合链上智能合约的纯P2P的分布式应用。Kaleido对去中心化的、可验证的应用开发做了全面的支持，包括提升了链的性能，对虚拟机做了功能扩展，提供了开发SDK和相关demo等资源。DApp可以通过链上的分布式账本结合P2P网络的通信机制来完成复杂的P2P应用。\n一个完整的基于kaleido的P2P应用开发由三个部分组成：\n 链上的合约代码，负责应用的结算和公共共识部分，一般以基于ERC20的Token合约实现。 lua脚本部分，这块是游戏和核心逻辑，通过交易形式存在链上合约中，在游戏运行时从链上下载下来在本地轻节点的lua虚拟机中执行。 前端js代码负责界面的交互和与lua脚本的通信。  下面的内容主要对基于Kaleido进行DApp应用开发的方法进行说明。\n 开发资源   "
},
{
	"uri": "https://docs.kaleidochain.io/mining/delegate-pool/",
	"title": "委托池",
	"tags": [],
	"description": "",
	"content": " 除了持有token的外部账户可以参与挖矿外，持有token的合约也可以参与挖矿。这为多种形式的挖矿提供了技术机制。\n委托池的用途 在你初期没有token的时候，你可以部署一个官方提供的委托合约代码，向官方申请委托授权。官方经过审核后，就会为你的合约进行抵押和委托。\n通过委托池挖矿，你也可以实现集中多人的小量token到一起来参与挖矿的功能。你只需要部署自己的委托池合约，并确保合约可以执行（参考合约抵押机制）。发布自己的合约地址，\n最后，你使用自己的委托合约注册矿工，就可以开始挖矿。\n委托池的实现 外部账户注册矿工是通过发起交易的方式，调用系统矿工合约来注册的。合约的注册方式有点不同。合约必须要实现一个调用系统矿工合约进行注册的接口，外部账户或其它合约通过调用该接口来注册矿工。\n在有多层合约嵌套调用时，需要注意以下细节。在注册系统矿工合约时，谁是矿工取决于msg.sender是谁。正常情况下，应该使用call调用系统矿工合约时，来实现将合约自己注册成为矿工。如果是要将调用合约的外部账号注册成为矿工，那么就需要使用delegatecall来调用，以使得msg.sender继承自调用者。具体可参考关于call和delegatecall的区别说明。\n注册成为矿工时可以指定受益人，因此合约提供的注册矿工的接口通常都要做权限管理，限制某些地址才能调用、或者某些地址才能成为受益人，以防止收益人账号被他人修改。最简单的实现是，只要合约的创建人才可调用该接口。\n下面是一个简单但功能完整的委托池的实现：\nimport \u0026quot;./lib/kaleido/SysContract.sol\u0026quot;; import \u0026quot;./lib/math/SafeMath.sol\u0026quot;; contract DelegatePoolDemo { using SafeMath for uint256; mapping(address=\u0026gt;uint256) private _balances; // register self into minerdb function registerMiner(bytes minerkey) public { require(msg.sender == SysContract.creatorOf(address(this))); SysContract.minerRegister(minerkey); } /** * @dev Gets the balance of the specified address. * @param owner The address to query the balance of. * @return A uint256 representing the amount owned by the passed address. */ function balanceOf(address owner) public view returns (uint256) { return _balances[owner]; } /** * @dev Delegate token to this contract. */ function delegate() public payable returns (bool) { require(msg.value \u0026gt; 0); _balances[msg.sender] = _balances[msg.sender].add(msg.value); return true; } /** * @dev Transfer token to a specified address. * @param to The address to transfer to. * @param value The amount to be transferred. */ function transfer(address to, uint256 value) public { require(to != address(0), \u0026quot;transfer to the zero address\u0026quot;); _balances[from] = _balances[from].sub(value); to.transfer(value); } }  "
},
{
	"uri": "https://docs.kaleidochain.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.kaleidochain.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]
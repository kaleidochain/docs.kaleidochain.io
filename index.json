[
{
	"uri": "https://docs.kaleidochain.io/",
	"title": "kaleidochain",
	"tags": [],
	"description": "",
	"content": " Kaleidochain 欢迎查看Kaleidochain文档\n  本文档正在频繁更新，请及时查看最新内容。\n "
},
{
	"uri": "https://docs.kaleidochain.io/contract/over-view/",
	"title": "概览",
	"tags": [],
	"description": "",
	"content": " 前言: Kaleido是基于Algorand共识算法的公链，系统结构和以太坊相同，采用的是账户模型和基于EVM虚拟机的智能合约系统，完全兼容以太坊的环境，智能合约开发语言采用的是Solidity。链上合约的部署和以太坊相同，也是采用gas机制，链上结算单位为Kal。kaleido智能合约编写和部署完全兼容以太坊合约,在使用时与以太坊不同之处在合约使用前需要抵押一部分Token获得链24小时周期的使用权，所以在合约部署完成之后需要执行一个抵押操作。除了这些还提供了更丰富的功能,权限控制、链上随机数等:\n 抵押机制:kaleido通过合约抵押机制分配合约执行权限,合约创建后,合约创建者必须有Kal抵押,合约才能被用户使用,(抵押额度=创建者账户Kal+抵押合约Kal),抵押额度关系着24小时内合约可以被调交易次数,创建者可以通过抵押合约来接受别人抵押增加合约调用次数.用户随时将账户Kal抵押给指定的合约创建者,也可以任意时候取出抵押额度，抵押的Kal只能由抵押者自己取出;\n权限控制:kaleido为降低用户使用门槛,提供给合约的功能模块,合约创建者可以通过权限控制合约为自己合约用户代扣合约交易手续费,实现用户零门槛接入;相应的为了防止代扣手续费交易泛滥,系统合约提供了2种权限控制模式:白名单模式和黑名单模式.\n 白名单模式,只有加入白名单列表用户才能发起代扣手续费交易,其他用户只能发送普通交易（由调用者付手续费用）; 黑名单模式,加入了黑名单列表用户不能发起代扣手续费交易; 注意同一个创建者的所有合约共享黑白名单数据; 创建者还能通过权限控制指定用户代扣手续费交易的gasLimit,gasPrice上限,防止账户Kal被大量消耗; 用户在调用合约时只需将交易中gasLimit(tx.gas)置为0,指定交易为合约创建者代扣手续费,这样用户即使在账户没有Kal的情况下也能使用合约;  "
},
{
	"uri": "https://docs.kaleidochain.io/introduction/",
	"title": "介绍",
	"tags": [],
	"description": "",
	"content": " Kaleido是新一代高性能区块链游戏平台。它采用了公开透明的、纯PoS区块链共识技术，实现了纯分布式的、可扩展的和高安全的区块链。它还提供了可信P2P传输、零知识证明等机制，尤其使得游戏类应用开发更为便捷，运行效果更好。\n测试网络 目前，我们的测试网络正在运营。该文档主要以测试网为主，说明如何安装、配置并加入Kaleido区块链。 主链发布后，该文档也会相应地更新。\n参与社区讨论 你可以在我们的社区与Kaleido开发者和其他社区成员一起交流与讨论，可以获得更有针对性的帮助和信息。\n  社区正在建设中，稍后会在这里公开。\n 了解最新项目进展 你可以在我们的博客了解项目的最新进展情况。\n"
},
{
	"uri": "https://docs.kaleidochain.io/getting-started/installing-node/",
	"title": "安装运行节点",
	"tags": [],
	"description": "",
	"content": " 我们目前只提供基于docker的二进制版本，仅需要安装docker并拉取镜像即可。\ndocker pull kaleidochain/kalgo  准备运行目录 首次运行，你需要准备一个数据目录，该目录可以在任意位置，但我们建议使用$HOME/.kaleido。为了后面使用方便，可以将该目录设置为环境变量KALEIDO_HOME。选取的目录将交由kaleido进行使用和管理，因此建议选择的目录下不要存储其它数据和文件。\nmkdir $HOME/.kaleido export KALEIDO_HOME=$HOME/.kaleido echo $KALEIDO_HOME  后面的命令中，我们将使用环境变量$KALEIDO_HOME来表示该目录。\n作为全节点启动 使用以下命令启动一个名为kalnode的全节点，通过参数--testnet使其连接到测试网络。\ndocker run -d --name kalnode -p 38883:38883 -p 38883:38883/udp \\ -v $KALEIDO_HOME:/root/.kaleido kaleidochain/kalgo --testnet  启动后，该节点会连接上测试网络，下载区块数据。 我们可以通过IPC连上该节点，查看连接上的peer节点数、当前区块高度等。\ndocker exec -it kalnode kalgo --testnet attach \u0026gt; net.peerCount 15 \u0026gt; eth.blockNumber 17568 \u0026gt; exit  如果你想让自己的节点也显示在网络状态页面中，增加参数--ethstats \u0026quot;your-node-name:bpFe9vOevM@stats-testnet.kaleidochain.io:38881\u0026quot;启动即可，其中your-node-name需要使用自己的节点名称来代替。\ndocker run -d --name kalnode -p 38883:38883 -p 38883:38883/udp \\ -v $KALEIDO_HOME:/root/.kaleido kaleidochain/kalgo --testnet \\ --ethstats \u0026quot;your-node-name:bpFe9vOevM@stats-testnet.kaleidochain.io:38881\u0026quot;  作为服务节点启动 如果你有钱包或其它应用，就需要在全节点的基础上，通过--rpc和--ws参数来开启RPC和WS服务，同时映射8545/8546端口到主机。 这里需要注意的是，由于节点运行在docker容器中，所以RPC和WS服务监听的IP必须是0.0.0.0。在服务器上运行时，应该设置合适的rpcvhosts/wsorigins参数，或者设置机器端口的访问权限，以避免被恶意人员访问到RPC和WS服务。\ndocker stop kalnode \u0026amp;\u0026amp; docker rm kalnode docker run -d --name kalnode \\ -p 38883:38883 -p 38883:38883/udp -p 8545:8545 -p 8546:8546 \\ -v $KALEIDO_HOME:/root/.kaleido \\ kaleidochain/kalgo --testnet \\ --rpc --rpcaddr 0.0.0.0 --rpcvhosts '*' \\ --ws --wsaddr 0.0.0.0 --wsorigins '*'  我们也可以使用如下命令，直接连接RPC服务来使用。\ndocker exec -it kalnode kalgo attach http://127.0.0.1:8545 \u0026gt; eth.blockNumber 17568 \u0026gt; exit  接下来，你的钱包应用就可以选择连接上你自己的全节点了。\n如果需要查看详细日志，我们可以带上日志参数--vmodule 'p2p/discv5/*=3,p2p/discover/*=3,*=5'重新启动全节点，然后就可以使用docker logs命令查看到详细日志。\ndocker stop kalnode \u0026amp;\u0026amp; docker rm kalnode docker run -d --name kalnode \\ -p 38883:38883 -p 38883:38883/udp -p 8545:8545 -p 8546:8546 \\ -v $KALEIDO_HOME:/root/.kaleido \\ kaleidochain/kalgo --testnet \\ --rpc --rpcaddr 0.0.0.0 --rpcvhosts '*' \\ --ws --wsaddr 0.0.0.0 --wsorigins '*' \\ --vmodule 'p2p/discv5/*=3,p2p/discover/*=3,*=5' docker logs --tail=100 -f kalnode  更新版本 如有新版本，只需要更新docker镜像，删除之前的容器，重新创建新的容器即可。\ndocker pull kaleidochain/kalgo docker stop kalnode \u0026amp;\u0026amp; docker rm kalnode docker run -d --name kalnode \\ -p 38883:38883 -p 38883:38883/udp \\ -v $KALEIDO_HOME:/root/.kaleido \\ kaleidochain/kalgo --testnet docker logs --tail=100 -f kalnode  "
},
{
	"uri": "https://docs.kaleidochain.io/mining/create-miner-key/",
	"title": "创建挖矿凭证",
	"tags": [],
	"description": "",
	"content": "我们首先需要创建挖矿公私钥对，得到挖矿凭证minerkey。\n假设当前区块高度为12065，通常情况下，你想尽快开始挖矿，那么你应该选择比当前区块高度略大或相等的高度值，这里我们选取12100，来生成从12100高度开始挖矿的minerkey，这个minerkey属于12100高度所在区间。这个开始高度由参数--begin指定。此外，在生成minerkey的时候，还要通过--miner指明矿工账号，--coinbase指明受益人的地址（即接收区块奖励的地址）。\n如下命令就是用来生成一个属于12100高度所在区间的挖矿凭证minerkey，矿工账号miner和受益人coinbase都是0x958DE277Cde7f5808a910dBf6f7854DF52C25833。\ndocker run --rm -v $KALEIDO_HOME:/root/.kaleido \\ kaleidochain/kalgo --testnet makeminerkey \\ --miner.stakeowner 0x958DE277Cde7f5808a910dBf6f7854DF52C25833 \\ --minerkey.coinbase 0x958DE277Cde7f5808a910dBf6f7854DF52C25833 \\ --minerkey.start 12100  以上命令执行需要一定的时间，完成后输出结果最后内容如下，这里给出了生成的minerkey，其内部包含了受益人coinbase的地址、起始高度begin、区间的结束高度end等信息。\nMinerKey: 0x39fb25e90000000000000000000000000000000000000000000000000000000000002f440000000000000000000000000000000000000000000000000000000000000064000000000000000000000000958de277cde7f5808a910dbf6f7854df52c2583355094cc911dca3b0ff42e63e7d4d627d5131307fcd495b535de4fa627bb999bfb728eed47ed4b7426c46e8b57c4132dc89e4092463267040c7c6769a80e72c69 Details: miner = 0x958DE277Cde7f5808a910dBf6f7854DF52C25833 coinbase = 0x958DE277Cde7f5808a910dBf6f7854DF52C25833 start = 12100 end = 1000000 lifespan = 100 vrfVerifier = 0x55094cc911dca3b0ff42e63e7d4d627d5131307fcd495b535de4fa627bb999bf voteVerfier = 0xb728eed47ed4b7426c46e8b57c4132dc89e4092463267040c7c6769a80e72c69  以上输出中的0x39fb25...就是挖矿凭证minerkey，其作用相当于公钥。对应的私钥数据存储在节点的数据目录$KALEIDO_HOME/testnet/kalgo/minerkeys下，注意不要公开或泄露该私钥数据。\n生成minerkey有以下几点需要注意：\n 必须提前100个区块注册：你如果想生成start=H的minerkey，就必须在H-100区块高度之前，完成注册 区块高度一旦到达你注册区间起始位置的100个区块以内，minerkey就无法修改 受益人Coinbase是可以随时修改，并在修改成功的下个区块立即生效，不受第2点的限制 更新minerkey时，新生成的区间的起始位置必须与要修改的minerkey一致，否则无法更新成功 你最多只能提前注册一个区间，即minerkey.start必须小于当前区块高度+1000000  如果私钥不慎遗失，并且此时minerkey无法修改，你可以将钱转入新的地址后，重新注册成为矿工即可。\n"
},
{
	"uri": "https://docs.kaleidochain.io/dapp-developer/resources/",
	"title": "开发资源",
	"tags": [],
	"description": "",
	"content": " 斗地主Demo   斗地主Demo源码   斗地主Demo APK  SDK下载   iOS版本的预编译SDK   Android版本的预编译SDK  编译环境说明  本Demo使用Cocos Creator V2.1.0开发与编译，可使用Mac版本或Windows版本进行构建与编译。下面以Mac版本的Cocos Creator为例对如何编译生成iOS版和Android版本的APP进行说明。 "
},
{
	"uri": "https://docs.kaleidochain.io/wallet/metamask/",
	"title": "配置MetaMask钱包",
	"tags": [],
	"description": "",
	"content": " 配置MetaMask MetaMask通过网络设置来支持KAL，你只需一步配置，即可在MetaMask中使用KAL。如果你还没有安装MetaMask，可以参考下面的安装MetaMask。\n打开MetaMask，点击右上角下拉框打开网络配置界面，点击最后一项。如下图：\n根据Kaleidochain网络配置信息，选择主网络或测试网络，填写网络配置项，然后点击保存，并关闭配置界面。如下图：\n此时，主界面显示已经连上Kaleido主网络，你可以在这里查看自己的KAL余额或发送交易，最近发送的交易也会显示在这里。\n注意：配置或切换网络后，可能会出现按钮点击无反应的情况，此时只需要重启浏览器即可。这是MetaMask的问题，官方正在解决中。\n安装MetaMask 请务必确保从浏览器官方渠道（Chrome Firefox Opera）下载安装MetaMask钱包。如果官方渠道打不开，可以在官方下载插件包选择手工安装，各浏览器的手工安装方法请参考官方安装指引。\n安装后，你可以新建一个账户，或导入原有的助记词来恢复账户。如下图：\n然后设置MetaMask钱包的打开密码。如下图：\n完成后，你会看到MetaMask钱包的主界面。如下图：\n现在，你可以配置MetaMask来使用KAL了。\n"
},
{
	"uri": "https://docs.kaleidochain.io/mining/register-miner-key/",
	"title": "注册挖矿凭证",
	"tags": [],
	"description": "",
	"content": " 要使minerkey可以挖矿，还需要有投票权。这需要使用自己的账户，调用矿工合约0x1000000000000000000000000000000000000002，将自己的矿工账户与挖矿凭证关联起来。这相当于将自己持有的token对应的投票权，委托给了这个minerkey。minerkey只有被委托后，才会具有一定的投票权，才能在挖矿中使用。\n注册矿工本质上是一次合约调用，有两种方式： 1. 通过钱包注册 2. 通过命令行注册\n使用钱包注册（推荐） 在钱包中，用你的账户，向测试链发送一笔交易，接收地址为矿工合约地址0x1000000000000000000000000000000000000002，data填写为上面生成的minerkey内容即可。在某些钱包客户端中，交易页面默认没有Data字段，需要在设置中打开。\n注册一次需要的gas费用大约在200000左右，建议填写gas费用为210000，或者在类似MetaMask的客户端中，选择Fastest来发送。gas太少会导致交易执行失败。\n使用命令行注册 使用命令行向矿工合约地址0x1000000000000000000000000000000000000002发送一笔交易，将data字段填写为上面生成的minerkey即可。\ndocker exec -it kalnode kalgo --testnet attach \u0026gt; myaddr = '0x958DE277Cde7f5808a910dBf6f7854DF52C25833'; \u0026gt; personal.unlockAccount(myaddr, 'your-password'); \u0026gt; hash = eth.sendTransaction({ from: myaddr, to: '0x1000000000000000000000000000000000000002', gas: 200000, gasPrice: 20000000000, data: '0x39fb25e90000000000000000000000000000000000000000000000000000000000002f440000000000000000000000000000000000000000000000000000000000000064000000000000000000000000958de277cde7f5808a910dbf6f7854df52c2583355094cc911dca3b0ff42e63e7d4d627d5131307fcd495b535de4fa627bb999bfb728eed47ed4b7426c46e8b57c4132dc89e4092463267040c7c6769a80e72c69' }); \u0026gt; admin.sleepBlocks(2); \u0026gt; eth.getTransactionReceipt(hash);  "
},
{
	"uri": "https://docs.kaleidochain.io/getting-started/creating-new-account/",
	"title": "创建新的账户",
	"tags": [],
	"description": "",
	"content": " 如果你还没有账户，可以按照本指引创建一个属于你自己的账户。这里介绍了通过成熟可信的钱包工具生成和命令行生成的方法。\n使用钱包客户端生成账户（推荐） 你可以使用现有的以太坊钱包，连接到kaleido区块链网络后，创建新的账户。\n下面以MetaMask为例，说明连接kaleido测试网络和创建账户的流程。\n在MetaMask中，点击右上角的下拉菜单。在打开的列表中，点击最底部的Custom RPC。在New Network文本框中，点击Show Advanced Options后，显示出4个文本框，分别填写如下信息：\n New RPC URL: http://testnet.kaleidochain.io:8545 ChainID: 889 Symbol: KAL Nickname: Kaleido Test Network  填写后如下图。\n最后点击旁边的Save按钮。\n当最上方的网络名称栏显示Kaleido Test Network即表示连接成功。\n然后在MetaMask中创建账户即可。一旦你有了token，就可以方便的使用钱包进行转账了。\n使用命令行生成账户 在运行你自己的节点之后，你还可以通过命令行生成一个新账户，具体如下。将其中的your-password替换为你自己的密码即可。\ndocker exec -it kalnode kalgo --testnet attach \u0026gt; personal.newAccount('your-password') \u0026quot;0xe40046ef6f0d4a05d90ca62d8ead47e21c886fc1\u0026quot; \u0026gt; eth.accounts [\u0026quot;0xe40046ef6f0d4a05d90ca62d8ead47e21c886fc1\u0026quot;]  "
},
{
	"uri": "https://docs.kaleidochain.io/getting-started/",
	"title": "开始",
	"tags": [],
	"description": "",
	"content": "我们建立了横跨各主要大陆的全球性区块链测试网络，你可以从网络状态页面查看到网络的运行情况。通过下面的步骤，你也可以加入这个测试网络。\n 安装运行节点   创建新的账户   获取测试网KAL   测试你的应用   "
},
{
	"uri": "https://docs.kaleidochain.io/mining/running-node-as-miner/",
	"title": "运行挖矿节点",
	"tags": [],
	"description": "",
	"content": " 一旦注册好矿工合约，将投票权成功委托给了挖矿凭证，那么就可以使用该挖矿凭证挖矿了。加上参数--mine --miner.stakeowner \u0026lt;miner addr\u0026gt;重新启动前面的全节点即可。\n注意这里的--etherbase的值，应该写你刚才发起矿工注册的交易的账号地址（而不是收益地址）。挖矿程序会使用该地址，在挖矿合约中查找你注册的挖矿信息。\ndocker stop kalnode \u0026amp;\u0026amp; docker rm kalnode docker run -d --name kalnode -v $KALEIDO_HOME:/root/.kaleido \\ -p 38883:38883 -p 38883:38883/udp \\ kaleidochain/kalgo --testnet \\ --mine --miner.stakeowner 'your-address'  可以使用以下命令查询验证你的节点是否正在挖矿：\ndocker exec -it kalnode kalgo --testnet attach \u0026gt; eth.mining true  如果仍然没有开始挖矿，可能有几个原因：\n minerkey没有注册成功 节点启动时的参数没有设置，或者没有与minerkey匹配 没有token，或只有少于1个单位的token 区块高度还没有到你注册的区间范围内 minerkey对应的私钥数据目录不存在或不匹配  如有以上问题，可以查阅之前的文档，重新操作一次。或者将相关信息和问题发到社区中寻求帮助。\n持续挖矿 由于挖矿凭证是有区块范围的，区块高度超过相应范围后，之前的挖矿凭证就失效了。你需要提前为下一个区间范围注册好另一个挖矿凭证，以保持持续不间断的挖矿。\n为避免矿工合约数据过大，矿工合约限制了最多能提前注册未来1个区间。 你可以提前为未来1个区间生成minerkey并提前注册，并预估好这几个区间跑完的时间，设置好提醒方式，以提醒你再次注册。 在测试网络中，1个区间大约可以跑24天。你可以设置每2~3周来检查或注册一次。\n"
},
{
	"uri": "https://docs.kaleidochain.io/getting-started/getting-testnet-token/",
	"title": "获取测试网KAL",
	"tags": [],
	"description": "",
	"content": "我们创建了一个免费领取kaleidochain测试网络KAL Token的页面 ，点击进去，填写自己的账户地址即可领取。\n"
},
{
	"uri": "https://docs.kaleidochain.io/dapp-developer/ios-build/",
	"title": "iOS版本编译",
	"tags": [],
	"description": "",
	"content": " 环境准备 可参阅Cocos Creator官方文档《安装配置原生开发环境》安装XCode。\n构建  Demo源代码下载并解压后，点击Cocos Creator菜单栏的 项目 -\u0026gt; 构建发布 -\u0026gt; 构建，Cocos Creator将自动生成iOS版本与Android版本的相关工程文件与代码。\n 将build_kaleido/jsb-link/frameworks/runtime-src/proj.ios_mac/ios/NativeGengine.h、build_kaleido/jsb-link/frameworks/runtime-src/proj.ios_mac/ios/NativeGengine.m和build_kaleido/jsb-link/frameworks/runtime-src/proj.ios_mac/ios/RootViewController.mm拷贝至build/jsb-link/frameworks/runtime-src/proj.android-studio/ios目录中，并拖动至XCode开发环境中的ios目录。\n 将build_kaleido/jsb-link/frameworks/runtime-src/proj.ios_mac/ios/portal.lua.h拷贝至build/jsb-link/frameworks/runtime-src/proj.android-studio/ios目录中，并拖动至XCode开发环境中的Resources目录。\n 将 Gengine.framework 拷贝至build/jsb-link/frameworks/runtime-src/proj.ios_mac/目录中，并拖动至XCode开发环境中的Frameworks目录。\n 点击工程设置中 Build Phases -\u0026gt; Compile Sources ，在RootViewController.mm后面的Compiler Flags中添加 -fmodules -fcxx-modules 来消除Use of \u0026lsquo;@import\u0026rsquo; when modules are disabled的报错。\n 点击工程设置中 Build Settings，在搜索框中输入CLang，Apple Clang - Language - Modules -\u0026gt; Enable Modules (C and Objective-C) 更改为 Yes 来消除build/jsb-link/frameworks/runtime-src/proj.ios_mac/Gengine.framework/Headers/Universe.objc.h:20:37: No type or protocol named \u0026lsquo;goSeqRefInterface\u0026rsquo;的报错。\n 上述2至6修改后的工程文件可参考 build_kaleido/jsb-link/frameworks/runtime-src/proj.ios_mac/KaleidoDoudizhuDemo.xcodeproj/project.pbxproj\n  编译与运行 1. iOS Simulator运行 点击Cocos Creator菜单栏的 项目 -\u0026gt; 构建发布 -\u0026gt; 编译，编译完成后点击 运行\n2. 真机运行 构建完成后使用XCode打开 ./build/jsb-link/frameworks/runtime-src/proj.ios_mac/KaleidoDoudizhuDemo.xcodeproj，修改 Bundle Identifier 与 Signing，选择已连接至Mac上的手机后点击XCode中的 运行 按钮即可。\n"
},
{
	"uri": "https://docs.kaleidochain.io/getting-started/testing-your-dapp/",
	"title": "测试你的应用",
	"tags": [],
	"description": "",
	"content": "Kaleidochain官方维护了一个测试网络的全节点testnet.kaleidochain.io，开放了RPC（8545端口）和WS（8546端口）接口，你可以使用命令行或者钱包连接到测试网络，部署和测试你的应用。\n部署时所需要的token，可以通过测试网络KAL分发页面免费领取。\n此外，你也可以启动一个测试网节点，待区块数据同步好后(可能需要数小时时间)，即可开始测试。\n"
},
{
	"uri": "https://docs.kaleidochain.io/dapp-developer/android-build/",
	"title": "安卓版本编译",
	"tags": [],
	"description": "",
	"content": " 环境准备 可参阅Cocos Creator官方文档《安装配置原生开发环境》安装Android SDK和Android NDK并在Cocos Creator中配置。\n构建  Demo源代码下载并解压后，点击Cocos Creator菜单栏的 项目 -\u0026gt; 构建发布 -\u0026gt; 构建，Cocos Creator将自动生成iOS版本与Android版本的相关工程文件与代码。\n build_kaleido/jsb-link/frameworks/runtime-src/proj.android-studio目录中一些项目文件的内容供开发者们参考，开发者需要根据自己的实际情况进行修改。\n 将build_kaleido/jsb-link/frameworks/runtime-src/proj.android-studio/app/src/org/cocos2dx/javascript/AppActivity.java中的修改拷贝至build/jsb-link/frameworks/runtime-src/proj.android-studio/app/src/org/cocos2dx/javascript/AppActivity.java\n 将build_kaleido/jsb-link/frameworks/runtime-src/proj.android-studio/app/src/io整个目录拷贝至build/jsb-link/frameworks/runtime-src/proj.android-studio/app/src/\n 将build_kaleido/jsb-link/frameworks/runtime-src/proj.android-studio/app/res/raw整个目录拷贝至build/jsb-link/frameworks/runtime-src/proj.android-studio/app/res/\n 在build/jsb-link/frameworks/runtime-src/proj.android-studio/app/中创建libs目录，并将 gengine.aar 拷贝到libs目录。\n 修改build/jsb-link/frameworks/runtime-src/proj.android-studio/app/build.gradle，将 minifyEnabled 和 shrinkResources 均设置为 false 。\nbuildTypes { release { debuggable false jniDebuggable false renderscriptDebuggable false minifyEnabled false shrinkResources false proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro' if (project.hasProperty(\u0026quot;RELEASE_STORE_FILE\u0026quot;)) { signingConfig signingConfigs.release } ... } }  修改build/jsb-link/frameworks/runtime-src/proj.android-studio/app/proguard-rules.pro，在文件最后添加\n# keep kaleido for release. -keep public class io.kaleidochain.** { *; } -dontwarn io.kaleidochain.**   编译与运行 点击Cocos Creator菜单栏的 项目 -\u0026gt; 构建发布 -\u0026gt; 编译，最后使用 adb install 进行安装运行。\n"
},
{
	"uri": "https://docs.kaleidochain.io/wallet/network/",
	"title": "Kaleidochain网络配置",
	"tags": [],
	"description": "",
	"content": "Kaleidochain生态目前运营有主网络和测试网络。主网络用于正式使用，测试网络用于开发测试使用。\n    主网络 测试网络     Network Name Kaleido Main Network Kaleido Test Network   RPC URL https://api.kalscan.io https://api-testnet.kalscan.io   RPC PORT 443 443   ChainID 888 889   Symbol KAL KAL   Block Explorer https://kalscan.io https://testnet.kalscan.io   Buy KAL Buy KAL with Digifinex Get it Free    Kaleidochain生态由社区共同构建和维护，感谢kalscan.io提供免费的API服务和浏览器支持。\n"
},
{
	"uri": "https://docs.kaleidochain.io/contract/quick-start/",
	"title": "快速开始",
	"tags": [],
	"description": "",
	"content": " 普通合约和以太坊上一致，合约创建者负责合约的部署，部署 需要花费一定的Kal，合约调用者调用时需要花费Kal，在调用的交易中指定gas_limit和gas_price。\n安装solidity编译器 和以太坊一样使用前需要安装npm的环境，然后再安装solifity的编译器环境\nnpm install -g solc@0.4.24 # or npm install -g solc-cli@0.4.24 # or sudo apt-get install solc@0.4.24  创建合约文件 创建新文件game.sol，并输入以下内容。\npragma solidity ^0.4.0; contract Game { address public creator; string greeting; function Game(string _greeting) public payable { creator = msg.sender; greeting = _greeting; } function greet() constant returns (string){ return greeting; } function setGreeting(string _newgreeting){ greeting = _newgreeting; } function kill(){ require(msg.sender == creator,\u0026quot;not creator\u0026quot;); suicide(creator); } }  编译部署合约 编译合约代码game.sol，得到ABI文件(Game_sol_Game.abi) 和二进制文件(Game_sol_Game.bin):\nsolcjs –abi –bin Game.sol  接下来使用命令行连接节点部署合约。\n这里假设你在本地运行了一个节点，并开启了8545端口，你需要使用命令kalgo attach http://127.0.0.1:8545连接到你的节点。如果没有，你可以使用测试网络的公开服务节点来代替kalgo attach http://testnet.kaleidochain.io:8545\n在打开的终端命令行中，执行以下代码：\nvar gameabi = [{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;creator\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;kill\u0026quot;,\u0026quot;outputs\u0026quot;:[],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_newgreeting\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;string\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;setGreeting\u0026quot;,\u0026quot;outputs\u0026quot;:[],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;greet\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;string\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_greeting\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;string\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;constructor\u0026quot;}]; var gamebin = \u0026quot;0x\u0026quot;+\u0026quot;60806040526040516105b53803806105b583398101806040528101908080518201929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806001908051906020019061007c929190610083565b5050610128565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100c457805160ff19168380011785556100f2565b828001600101855582156100f2579182015b828111156100f15782518255916020019190600101906100d6565b5b5090506100ff9190610103565b5090565b61012591905b80821115610121576000816000905550600101610109565b5090565b90565b61047e806101376000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806302d05d3f1461006757806341c0e1b5146100be578063a4136862146100d5578063cfae32171461013e575b600080fd5b34801561007357600080fd5b5061007c6101ce565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100ca57600080fd5b506100d36101f3565b005b3480156100e157600080fd5b5061013c600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506102f1565b005b34801561014a57600080fd5b5061015361030b565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610193578082015181840152602081019050610178565b50505050905090810190601f1680156101c05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156102b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f6e6f742063726561746f7200000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b80600190805190602001906103079291906103ad565b5050565b606060018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103a35780601f10610378576101008083540402835291602001916103a3565b820191906000526020600020905b81548152906001019060200180831161038657829003601f168201915b5050505050905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106103ee57805160ff191683800117855561041c565b8280016001018555821561041c579182015b8281111561041b578251825591602001919060010190610400565b5b509050610429919061042d565b5090565b61044f91905b8082111561044b576000816000905550600101610433565b5090565b905600a165627a7a723058200a8b27b1fc751aab13bbf1db698f2f9c0835fd1b5a6dbd4e77ee8cb89f0939950029\u0026quot;; var gameContract = web3.eth.contract(gameabi); var gameToken = gameContract.new(\u0026quot;construct1\u0026quot;,{from:eth.accounts[0],data:gamebin,gas:1000000},function (e,contract){if(contract.address != \u0026quot;undefined\u0026quot; ){console.log(\u0026quot;game contract success:\u0026quot;+contract.address+\u0026quot; \u0026quot;+contract.transactionHash);} else{console.log(\u0026quot;game contract fail\u0026quot;)}}); // test call gameToken.greet();  "
},
{
	"uri": "https://docs.kaleidochain.io/wallet/",
	"title": "钱包",
	"tags": [],
	"description": "",
	"content": "MetaMask是最好用的钱包之一，它是开源钱包，安全性很好，用起来也很方便。同时它也支持管理Kaleidochain的KAL。我们推荐初级用户使用MetaMask。\n如果需要更高的安全性，建议配合MetaMask使用硬件钱包Trezor或Ledger。\n 配置MetaMask钱包   Kaleidochain网络配置   "
},
{
	"uri": "https://docs.kaleidochain.io/mining/",
	"title": "挖矿",
	"tags": [],
	"description": "",
	"content": "在Kaleido中，除了账户的公私钥对外，还有另外一种矿工公私钥对minerkey。账户通过调用矿工合约minerdb注册接口，将自己与矿工公私钥对关联，表示授权该矿工公私钥使用自己持有的token权重进行挖矿。\n由于在挖矿过程中，需要使用到矿工私钥，因此这样的实现方案使得不需要token持有账户的私钥即可使用该账户对应的投票权，避免了暴露token持有账户私钥的可能性，极大地提升了安全性。\n此外，每一次账户和矿工公私钥的关联都不是永久的，因为矿工公私钥是有有效期的。生成矿工公私钥时，需要选择一个区块链的高度范围，那么该关联授权仅在对应高度范围内才有效。\n测试链将区块链的高度按1,000,000大小划分为一个个区间，即[0, 1,000,000)是第一个区间，[1,000,000, 2,000,000)是第二个区间，以此类推。生成矿工公私钥时，只能自由选择起始高度，结束高度就是起始高度对应区间的最后一个区块，相当于将关联授权的有效期限制在起始高度所在区间内。\n按照后续步骤，启动你自己的挖矿节点。\n 创建挖矿凭证   注册挖矿凭证   运行挖矿节点   委托池   "
},
{
	"uri": "https://docs.kaleidochain.io/contract/using-truffle/",
	"title": "使用Truffle开发合约",
	"tags": [],
	"description": "",
	"content": " 合约开发与部署 kaleido合约开发部署完全兼容以太坊,并有更丰富的功能模块,合约开发部署推荐使用truffle框架。\n1 环境安装 //nodejs 8.12.0+版本安装 略 //truffle框架4.1.14版本安装 npm install -g truffle@4.1.14  2 truffle项目初始化 git clone https://github.com/truffle-box/bare-box.git  3 项目配置节点 在 truffle-config.js文件找到development,删除注释,配置节点ip,port:\n// development: { // host: \u0026quot;127.0.0.1\u0026quot;, // kaleido节点ip,可以使用:106.75.184.214公共节点,也可以是自己搭建的节点) // port: 8545, // 节点rcp服务端口(默认为:8545) // network_id: \u0026quot;*\u0026quot;, // 网络id,默认即可 // },  4 写入合约代码 cd contracts/;vim Game.sol;\npragma solidity ^0.4.0; contract Game { address public creator; string greeting; function Game(string _greeting) public payable { creator = msg.sender; greeting = _greeting; } function greet() constant returns (string){ return greeting; } function setGreeting(string _newgreeting){ greeting = _newgreeting; } function kill(){ require(msg.sender == creator,\u0026quot;not creator\u0026quot;); suicide(creator); } }  5 新建合约部署脚本 cd migrations;vim 2_initial_game.js;\nconst Game = artifacts.require(\u0026quot;Game\u0026quot;); module.exports = function(deployer) { deployer.deploy(Game,\u0026quot;构造函数参数1\u0026quot;); };  6 合约部署 truffle migrate --reset --network development  7 kalgo控制台测试 调用合约前需要确认合约创建者是否有足够抵押(创建者账户上Kal+抵押合约创建者Kal),否则合约不能被调用,抵押步骤见第2节。 在build/contracts/Game.json拷贝abi,使用kalgo客户端连上节点:\nkalgo attach http://127.0.0.1:8545;\nvar gameabi = [{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;creator\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;kill\u0026quot;,\u0026quot;outputs\u0026quot;:[],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_newgreeting\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;string\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;setGreeting\u0026quot;,\u0026quot;outputs\u0026quot;:[],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;greet\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;string\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_greeting\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;string\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;constructor\u0026quot;}]; var gameContract= web3.eth.contract(gameabi).at(gameAddress); //显示:构造函数参数1 game.greet();  8 合约创建者 与以太坊不一样处在kaleido链上,每个合约的创建者都会被记录在系统合约ConCreator(\u0026ldquo;0x1000\u0026hellip;.0001\u0026rdquo;);有两种方式可以获取合约的创建者\n 8.1 在kalgo控制台,通过系统合约可以查询合约创建者:\nvar concreatorabi = [{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;conAddr\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;get\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;}]; var concreator = web3.eth.contract(concreatorabi).at(\u0026quot;0x1000000000000000000000000000000000000001\u0026quot;); //查询合约(contractAddress)创建者 concreator.get(contractAddress);  8.2 在solidity合约中查询合约创建者\ncontract ConCreatorInterface { function get(address conAddr) public view returns(address); } ConCreatorInterface concreator = ConCreatorInterface(0x1000000000000000000000000000000000000001); //查询合约(contractAddress)创建者 concreator.get(contractAddress);   "
},
{
	"uri": "https://docs.kaleidochain.io/contract/",
	"title": "智能合约",
	"tags": [],
	"description": "",
	"content": "Kaleido是基于Algorand共识算法的公链，系统采用的是账户模型和基于EVM虚拟机的智能合约系统，智能合约开发语言采用的是Solidity，完全兼容以太坊的开发生态。链上合约的调用需要有合约抵押和gas消耗，gas消耗机制与以太坊相同，合约抵押机制下面有详细说明。\n 概览   快速开始   使用Truffle开发合约   抵押机制   权限控制   合约创建人   获取随机数   "
},
{
	"uri": "https://docs.kaleidochain.io/contract/delegation-contract/",
	"title": "抵押机制",
	"tags": [],
	"description": "",
	"content": " kaleido使用抵押机制分配合约交易次数,防止用户恶意调用代扣费合约,堵塞网络;24小时内同一创建者的所有合约交易量不能超过创建者(以下称creator)抵押额度值,抵押额度由2个部分组成:创建者账户上Kal额度,以及系统抵押合约上其他用户为creator抵押的Kal额度;用户可以将账户上Kal通过系统抵押合约(Delegation(\u0026ldquo;0x1000\u0026hellip;0004\u0026rdquo;))抵押给其他creator,以增加其合约24小时调用交易次数;\n每个交易需要抵押的Kal与gasPrice成正比，目前抵押需要量计算公式为: + 抵押量 = 单次交易抵押量 * 交易次数 + 单次交易抵押量 = gasPrice * C = 1e9 * 2e6 = 2e15 = 0.002 Kal gasPrice 默认值为1e9 Wei\n1 solidity合约实例化系统抵押合约 // 系统抵押合约接口 contract DelegationInterface { //用户为creatorAddress抵押Kal function delegate(address creatorAddress) public payable; //取回creatorAddress的抵押 function withdraw(address creatorAddress, uint amount) public; //查询creatorAddress接受到的抵押 function totalReceivedToken(address creatorAddress) public view returns(uint); //查询userAddress为其他creator抵押的额度 function totalDelegatedToken(address userAddress) public view returns(uint) //查询userAddress给 creatorAddress抵押的额度 function getAmount(address userAddress, address creatorAddress) public view returns(uint) } DelegationInterface Delegation = DelegationInterface(0x1000000000000000000000000000000000000004);  2 kalgo控制台中实例化系统合约 kalgo attach http://127.0.0.1:8545; var delegationabi = [{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;to\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;delegate\u0026quot;,\u0026quot;outputs\u0026quot;:[],\u0026quot;payable\u0026quot;:true,\u0026quot;stateMutability\u0026quot;:\u0026quot;payable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;addr\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;name\u0026quot;:\u0026quot;amount\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;withdraw\u0026quot;,\u0026quot;outputs\u0026quot;:[],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;addr\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;totalReceivedToken\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;addr\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;totalDelegatedToken\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;from\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;name\u0026quot;:\u0026quot;to\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;getAmount\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;}]; var Delegation = web3.eth.contract(delegationabi).at(\u0026quot;0x1000000000000000000000000000000000000004\u0026quot;);  3 用户没有自己的合约,可以将Kal抵押给其他creator,抵押的Kal可以随时取出,并且只能由自己取出。 //抵押1e18个kal给其他creator //creatorAddress-其他合约创建者账户地址 //eth.acccounts[0]-用户账户地址 Delegation.delegate(creatorAddress,{from:eth.acccounts[0],value:1e18}); //查询自己已抵押给creator的额度 Delegation.getAmount(eth.accounts[0],creatorAddress); //查询自己所有抵押出去的额度 Delegation.totalDelegatedToken(eth.acccounts[0]); //用户随时取出自己抵押给creator的额度 Delegation.withdraw(creatorAddress,value,{from:eth.accounts[0]});  4 其他用户为自己(creator)的抵押 //查询某个用户为自己(creator)抵押的额度 //userAddress-抵押给自己额度的用户地址 //creatorAddress-合约创建者账户地址 Delegation.getAmount(userAddress,creatorAddress); //查询自己(creator)收到的所有抵押额度 Delegation.totalReceivedToken(creatorAddress);  "
},
{
	"uri": "https://docs.kaleidochain.io/dapp-developer/",
	"title": "DApp开发",
	"tags": [],
	"description": "",
	"content": "Kaleido链除了可以开发以太坊上基于Solidity的智能合约外，还能开发结合链上智能合约的纯P2P的分布式应用。Kaleido对去中心化的、可验证的应用开发做了全面的支持，包括提升了链的性能，对虚拟机做了功能扩展，提供了开发SDK和相关demo等资源。DApp可以通过链上的分布式账本结合P2P网络的通信机制来完成复杂的P2P应用。\n一个完整的基于kaleido的P2P应用开发由三个部分组成：\n 链上的合约代码，负责应用的结算和公共共识部分，一般以基于ERC20的Token合约实现。 lua脚本部分，这块是游戏和核心逻辑，通过交易形式存在链上合约中，在游戏运行时从链上下载下来在本地轻节点的lua虚拟机中执行。 前端js代码负责界面的交互和与lua脚本的通信。  下面的内容主要对基于Kaleido进行DApp应用开发的方法进行说明。\n 开发资源   iOS版本编译   安卓版本编译   "
},
{
	"uri": "https://docs.kaleidochain.io/contract/authority-contract/",
	"title": "权限控制",
	"tags": [],
	"description": "",
	"content": "  权限控制是kaleido为降低用户使用门槛提供的功能模块,通过权限合约功能，合约的创建者(以下称creator)除了支付合约部署费用,还可以为调用合约的交易代扣手续费,合约调用者(tx.from)无需Kal,就可以使用合约。 creator可以通过系统权限控制合约Authority(0x1000…0003)控制用户代扣费权限,以及代扣收付费交易gasPrice,gasLimit上限。  权限控制合约有2种权限模式; 0-白名单模式(默认),只有加入白名单列表的用户才能发送代扣费交易,其他用户只能发送普通交易调用合约; 1-黑名单模式,加入了黑名单列表的用户不能发送代扣费交易,但仍可以发送普通交易调用合约;\n 注:同一creator下的所有合约共享黑/白名单数据列表;\n 如果需要使用权限控制合约，需要将合约的创建者调用权限控制合约进行设置，设置属性有代扣费交易允许的最大gasLimit和代扣费交易允许的最大gasPrice 针对每个合约可以单独设置gasLimit和gasPrice，对合约还可以设置一个Mode（白名单还是黑名单） 一个合约Creator共用白名单和黑名单数据，合约单独设置具体采用的模式 合约的gasLimit和gasPrice在没有设置的情况下会继承合约创建者设置的gasLimit和gasPrice 当合约创建者没有通过权限合约进行设置操作时，合约就是普通合约，需要由调用者支持gas费用 即使合约创建者和合约通过权限合约进行了设置操作，用户调用合约时通过指定gaslimit\u0026gt;0和gasPrice\u0026gt;0 时，该交易也可以强制用户付费调用，如果用户账户kal足够调用成功，如果余额不足则调用失败 在合约创建者或合约设置gasLimit和gasPrice情况下，白名单用户或者黑名单中不在的用户在调用合约交易时设置gasLimit=0时，该交易由合约创建者付费，此时gasPrice必须小于或等于合约或者合约创建者设置的gasPrice，否则该交易无效，不会被打包 当合约创建者或者合约需要改变付费模式时可以通过设置gasLimit是否为0进行改变，当gasLimit=0 则合约所有调用者都是调用者付费 合约的白名单模式和黑名单模式可以随时改变 当合约创建者账户余额不足以支付交易费用时，设置为合约付费(gasLimit=0)的交易会失败，此时如果用户可以通过设置交易中gasLimit\u0026gt;0 来强制调用合约   注:给abigen自动生成的代码，也增加了一个函数 TransactExact,这个函数不会自动设置gasLimit,用于发起合约付费交易.\n1 权限控制合约使用  solidity合约中实例化权限控制合约\ncontract AuthorityInterface { //设置用户代扣手续费交易gasPrice上限,合约没设置继承creator function setMaxGasPrice(address creatorOrcontract, uint _price) public returns(bool); //设置用户代扣手续费交易gasLimit上限,合约没设置继承creator function setGasLimit(address creatorOrcontract, uint64 _gas) public returns(bool); //设置权限模式,0-表面的模式(默认),1-黑名单模式，只对合约有效 function setModel(address contract, uint _model) public returns(bool); //查询合约 MaxGasPrice,GasPrice,Mode三项的设置 function getAll(address contractAddress) public view returns(uint price,uint64 gas,uint mod); //添加用户memberAddress到自己黑名单列表 function addBlack(address memberAddress ) public returns(bool); //添加用户memberAddress到自己白名单列表 function addWhite(address memberAddress ) public returns(bool); //将用户memberAddress从自己黑名单列表移除 function removeBlack(address memberAddress ) public returns(bool); //将用户memberAddress从自己白名单列表移除 function removeWhite(address memberAddress ) public returns(bool); //用户memberAddress是否在合约contractAddress的黑名单 function isBlack(address contractAddress,address memberAddress ) public view returns(bool); //用户memberAddress是否在合约contractAddress的白名单 function isWhite(address contractAddress,address memberAddress ) public view returns(bool); } AuthorityInterface Authority = AuthorityInterface(0x1000000000000000000000000000000000000003);  kalgo控制台实例化权限控制合约\ngkal attach http://127.0.0.1:8545  var authorityabi=[{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;addr\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;name\u0026quot;:\u0026quot;_price\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;setMaxGasPrice\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;addr\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;name\u0026quot;:\u0026quot;_gas\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint64\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;setGasLimit\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;addr\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;name\u0026quot;:\u0026quot;_model\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;setModel\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;Addr\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;getAll\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;price\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;},{\u0026quot;name\u0026quot;:\u0026quot;gas\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint64\u0026quot;},{\u0026quot;name\u0026quot;:\u0026quot;mod\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;uint256\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;memberAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;addBlack\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;memberAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;addWhite\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;memberAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;removeBlack\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;memberAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;removeWhite\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;contractAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;name\u0026quot;:\u0026quot;memberAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;isBlack\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;contractAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;},{\u0026quot;name\u0026quot;:\u0026quot;memberAddress\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;isWhite\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;}] var Authority = web3.eth.contract(authorityabi).at(\u0026quot;0x1000000000000000000000000000000000000003\u0026quot;);   2 通过creator开启合约代扣费功能  creator设置了MaxGasPrice,GasLimit即开启了代扣费功能,将GasLimit设为小于21000的值即关闭合约扣费功能\n//为creator下所有合约开启代扣手续费 Authority.setMaxGasPrice(creatorAddress,1e6); Authority.setGasLimit(creatorAddress,5e10); //关闭代扣费功能 Authority.setGasLimit(creatorAddress,0); //查询creatorAddress设置 Authority.getAll(creatorAddress)   3 通过合约开启代扣费,并使用白名单模式控制用户权限  合约设置自己独立MaxGasPrice,GasLimit,只开启本合约代扣费功能;如果没有设置,继承合约creator的MaxGasPrice,GasLimit;\n//为合约开启代扣手续费 //如果没设置会继承creator设置的MaxGasPrice Authority.setMaxGasPrice(contractAddress,1e6); //如果没设置会继承creator设置的GasLimit Authority.setGasLimit(contractAddress,5e10); //设置白名单模式; Authority.setModel(contractAddress,0); //用户加入白名单列表(该用户将不能发送代扣费交易) Authority.addWhite(contractAddress,senderAddress); //关闭代扣费,这里将GasLimit设置为1关闭,如果设置为0,会继承creator的GasLimit Authority.setGasLimit(contractAddress,1);   4 通过合约开启代扣费,并使用黑名单模式控制用户权限 //为合约开启代扣手续费 //如果没设置会继承creator设置的MaxGasPrice Authority.setMaxGasPrice(contractAddress,1e6); //如果没设置会继承creator设置的GasLimit Authority.setGasLimit(contractAddress,5e10); //设置黑名单模式; Authority.setModel(contractAddress,1); //用户加入黑名单列表(该用户将不能发送代扣费交易) Authority.addBlack(contractAddress,senderAddress); //关闭代扣费,这里将GasLimit设置为1关闭,如果设置为0,会继承creator的GasLimit Authority.setGasLimit(contractAddress,1);  5 用户发起一比代扣费交易 //假设已有一个game合约,确认合约创建者有足够抵押(创建者账户Kal+抵押合约中创建者抵押额度) var game = web3.eth.contract(gameabi).at(gameAddress); //第1节中控制台实例化权限控制合约 var Authority = web3.eth.contract(authorityabi).at(\u0026quot;0x1000000000000000000000000000000000000003\u0026quot;); //查询game合约,权限设置 var conf = Authority.getAll(game.address); //game合约允许代扣费交易的最大gasPrice var GasPrice = conf[0]; //game合约允许代扣费交易的最大gasLimit var MaxGasLimit = conf[1]; //game合约权限模式 0-白名单模式 1-黑名单模式 var mode = conf[2]; //判断game合约是否开启合约代扣费 if(GasPrice == 0 || MaxGasLimit \u0026lt;21000){ return false; } //如果是白名单模式,查询自己(userAddress)是否在白名单列表 if(mode == 0 \u0026amp;\u0026amp; !Authority.isWhite(game.address,userAddress)){ return false; } //如果是黑名单模式,查询自己(userAddress)是否不在黑名单列表 if(mode == 1 \u0026amp;\u0026amp; Authority.isBlack(game.address,userAddress)){ return false; } //确认无误,用户(userAddress)发送一比代扣费交易 //交易gasPrice填game合约允许的最大GasPrice,也可以填一个小于GasPrice的值 //交易gasLimit置为0,指定这是一比代扣费交易 game.setgreet(\u0026quot;test\u0026quot;,{from:userAddress,gasPrice:GasPrice,gas:0})  6 一个使用权限控制白名单模式合约实例: pragma solidity ^0.4.0; contract AuthorityInterface { function setMaxGasPrice(address addr, uint _price) public returns(bool); function setGasLimit(address addr, uint64 _gas) public returns(bool); function setModel(address addr, uint _model) public returns(bool); function getAll(address Addr) public view returns(uint price,uint64 gas,uint mod); function addBlack(address memberAddress ) public returns(bool); function addWhite(address memberAddress ) public returns(bool); function removeBlack(address memberAddress ) public returns(bool); function removeWhite(address memberAddress ) public returns(bool); function isBlack(address contractAddress,address memberAddress ) public view returns(bool); function isWhite(address contractAddress,address memberAddress ) public view returns(bool); } contract Game{ address public creator; string greeting; AuthorityInterface Authority = AuthorityInterface (0x1000000000000000000000000000000000000003); //构造函数 function Game(string _greeting) public payable{ creator = msg.sender; greeting = _greeting; //开启合约代扣费,设置允许代扣费交易最大gasPrice,gasLimit Authority.setMaxGasPrice(this,1e10); Authority.setGasLimit(this,1e6); //设置白名单权限控制模式 Authority.setModel(this,0); //将创建者加入白名单列表 Authority.addWhite(msg.sender); } function () payable {} //添加用户到白名单 function addWhite(address addr) returns(bool){ require(msg.sender == creator,\u0026quot;not creator\u0026quot;); Authority.addWhite(addr); return true; } //用户从白名单移除 function removeWhite(address addr) returns(bool){ require(msg.sender == creator,\u0026quot;not creator\u0026quot;); Authority.removeWhite(addr); return true; } //查询变量 function greet() constant returns (string){ return greeting; } //设置变量 function setGreeting(string _newgreeting){ greeting = _newgreeting; } //注销合约 function kill(){ require(msg.sender == creator,\u0026quot;not creator\u0026quot;); suicide(creator); } //查询合约权限配置 function getAll() public veiw returns(uint,uint,uint){ return Authority.getAll(address(this)); } //查询用户是否为白名单 function isWhite(address addr) public view returns(bool){ return Authority.isWhite(address(this),addr); } }  7 kalgo控制台测试,  测试合约前确认合约创建者有足够抵押(创建者账户Kal+抵押合约中创建者额度); 用户发送合约代扣费交易需将交易gasLimit置为0。\n1.控制台实例化合约 kalgo attach http://127.0.0.1:8545\nvar gameabi = [{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;creator\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_greeting\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;string\u0026quot;}],\u0026quot;payable\u0026quot;:true,\u0026quot;stateMutability\u0026quot;:\u0026quot;payable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;constructor\u0026quot;},{\u0026quot;payable\u0026quot;:true,\u0026quot;stateMutability\u0026quot;:\u0026quot;payable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;fallback\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;addr\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;grant\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;addr\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;address\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;revoke\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;bool\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:true,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;greet\u0026quot;,\u0026quot;outputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;string\u0026quot;}],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;view\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;_newgreeting\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;string\u0026quot;}],\u0026quot;name\u0026quot;:\u0026quot;setGreeting\u0026quot;,\u0026quot;outputs\u0026quot;:[],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;},{\u0026quot;constant\u0026quot;:false,\u0026quot;inputs\u0026quot;:[],\u0026quot;name\u0026quot;:\u0026quot;kill\u0026quot;,\u0026quot;outputs\u0026quot;:[],\u0026quot;payable\u0026quot;:false,\u0026quot;stateMutability\u0026quot;:\u0026quot;nonpayable\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;}] //gameAddress 从部署合约控制台获取 var game = web3.eth.contract(gameabi).at(gameAddress);  2.将用户添加到合白名单\n//使用creator账户将用户地址加入白名单 game.addWhite(eth.accounts[0],{from:creatorAddress}); //查询用户是否是白名单 game.isWhite(eth.accounts[0]); \u0026gt; 3. 用户发起一比代扣费交易 //查询game合约gasPrice,gasLimit上限 var conf = game.getAll() //game合约允许代扣费交易的最大gasPrice var GasPrice = conf[0]; //game合约允许代扣费交易的最大gasLimit var MaxGasLimit = conf[1]; //game合约权限模式 0-白名单模式 1-黑名单模式 var mode = conf[2]; //用户查询自己是否是白名单 if (!game.isWhite(eth.accounts[0])){ return false; } //用户发送一笔代扣费交易,交易gasPrice使用game合约允许的最大GasPrice, //将交易gas设置为0,表示这是一比代扣费交易 game.setGreeting(\u0026quot;test\u0026quot;,{from:eth.accounts[0],gasPrice:GasPrice,gas:0}); //查询是否生效 显示:`test` game.greet();   "
},
{
	"uri": "https://docs.kaleidochain.io/contract/contract-creator/",
	"title": "合约创建人",
	"tags": [],
	"description": "",
	"content": "在Kaleido Chain中，系统内置了一个系统合约，记录了所有合约的创建人地址。创建人地址就是部署合约的外部账号地址。如果一个合约A是由另一个合约B部署的，合约A的创建人地址就自动继承合约B的创建人地址。该创建人地址在合约的构造函数中也可以成功获取。\n合约创建人有多种用途。第一种用途就是合约抵押机制。合约要可执行，需要先抵押一定量的token到其创建人账户中。系统自动识别合约的创建人抵押量，来计算合约可被调用的次数。第二种用途就是权限管理。很多情况下，一个合约都需要与一个超级管理员关联，以限制部分接口的调用权限。合约创建人机制默认提供了一直超级管理员的可选项，简化了相关合约的开发。\n要在Solidity中获取一个合约的创建人，需要使用以下代码：\nimport 'lib/kaleido/SysContract.sol'; contract Demo { // WithDraw - only creator can get the token function WithDraw(uint amount) public { require(msg.sender == SysContract.getCreator(address(this))); msg.sender.transfer(amount); } }  "
},
{
	"uri": "https://docs.kaleidochain.io/contract/solidity-rand/",
	"title": "获取随机数",
	"tags": [],
	"description": "",
	"content": "区块链上的合约经常会需要产生随机值，目前的区块链一般采用交易hash或者区块hash产生随机值，但是这些都不是完全独立的随机值，可以被矿工或者交易发起者进行攻击或者利用。\nKaleido提供了真正不可预测的安全可靠的随机数机制。Kaleido的随机性主要有以下几个来源：\n 区块种子 受益于VRF算法和Algorand共识算法机制，每个区块中的随机数种子是无法被任何人（包括提案人自己）提前预测的 交易Hash 发起获取随机数的交易hash 内部序列号 区块内部使用种子的次数，除了区块构造者，其他人无法提取预测 用户数据 由调用者传入的任意数据，可选  因此，Kaleido所产生的随机数，是一个真正不可预测的安全可靠的随机数。\n你可以通过内置函数直接获取随机数，代码如下：\nfunction random() public view returns(uint256) { uint256[1] memory output; assembly { if iszero(staticcall(not(0), 101, 0x0, 0x0, output, 0x20)) { revert(0, 0) } } return output[0]; }  也可以获取过去某个区块的随机种子（限制最多能取到最近2048个区块）：\nfunction getSeed(uint height) public view returns(uint256) { uint256[1] memory input; uint256[1] memory output; input[0] = height; assembly { if iszero(staticcall(not(0), 100, input, 0x20, output, 0x20)) { revert(0, 0) } } return output[0]; }  以上函数已经在有封装好的函数库可以直接调用，具体可参考SysContract.sol。\n"
},
{
	"uri": "https://docs.kaleidochain.io/mining/delegate-pool/",
	"title": "委托池",
	"tags": [],
	"description": "",
	"content": " 除了持有token的外部账户可以参与挖矿外，持有token的合约也可以参与挖矿。这为多种形式的挖矿提供了技术机制。\n委托池的用途 在你初期没有token的时候，你可以部署一个官方提供的委托合约代码，向官方申请委托授权。官方经过审核后，就会为你的合约进行抵押和委托。\n通过委托池挖矿，你也可以实现集中多人的小量token到一起来参与挖矿的功能。你只需要部署自己的委托池合约，并确保合约可以执行（参考合约抵押机制）。发布自己的合约地址，\n最后，你使用自己的委托合约注册矿工，就可以开始挖矿。\n委托池的实现 外部账户注册矿工是通过发起交易的方式，调用系统矿工合约来注册的。合约的注册方式有点不同。合约必须要实现一个调用系统矿工合约进行注册的接口，外部账户或其它合约通过调用该接口来注册矿工。\n在有多层合约嵌套调用时，需要注意以下细节。在注册系统矿工合约时，谁是矿工取决于msg.sender是谁。正常情况下，应该使用call调用系统矿工合约时，来实现将合约自己注册成为矿工。如果是要将调用合约的外部账号注册成为矿工，那么就需要使用delegatecall来调用，以使得msg.sender继承自调用者。具体可参考关于call和delegatecall的区别说明。\n注册成为矿工时可以指定受益人，因此合约提供的注册矿工的接口通常都要做权限管理，限制某些地址才能调用、或者某些地址才能成为受益人，以防止收益人账号被他人修改。最简单的实现是，只要合约的创建人才可调用该接口。\n下面是一个简单但功能完整的委托池的实现：\nimport \u0026quot;./lib/kaleido/SysContract.sol\u0026quot;; import \u0026quot;./lib/math/SafeMath.sol\u0026quot;; contract DelegatePoolDemo { using SafeMath for uint256; mapping(address=\u0026gt;uint256) private _balances; // register self into minerdb function registerMiner(bytes minerkey) public { require(msg.sender == SysContract.creatorOf(address(this))); SysContract.minerRegister(minerkey); } /** * @dev Gets the balance of the specified address. * @param owner The address to query the balance of. * @return A uint256 representing the amount owned by the passed address. */ function balanceOf(address owner) public view returns (uint256) { return _balances[owner]; } /** * @dev Delegate token to this contract. */ function delegate() public payable returns (bool) { require(msg.value \u0026gt; 0); _balances[msg.sender] = _balances[msg.sender].add(msg.value); return true; } /** * @dev Transfer token to a specified address. * @param to The address to transfer to. * @param value The amount to be transferred. */ function transfer(address to, uint256 value) public { require(to != address(0), \u0026quot;transfer to the zero address\u0026quot;); _balances[from] = _balances[from].sub(value); to.transfer(value); } }  "
},
{
	"uri": "https://docs.kaleidochain.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.kaleidochain.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]